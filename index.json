[{"content":"ChemMCP is a chemistry toolkit that empowers AI assistants with advanced chemistry capabilities.\nThis guide will help you quickly set up and start using ChemMCP.\nQuick Setup # Install uv\nWe recommend using uv, a fast Python package and project manager. Install uv with the following commands:\n# On macOS and Linux curl -LsSf https://astral.sh/uv/install.sh | sh # On Windows, use Powershell powershell -ExecutionPolicy ByPass -c \u0026#34;irm https://astral.sh/uv/install.ps1 | iex\u0026#34; Download ChemMCP\ngit clone https://github.com/OSU-NLP-Group/ChemMCP.git Set Up and Install\ncd ChemMCP uv sync This above commands create a Python virtual environment in the .venv folder with all required packages installed. Then activate the environment:\n# On macOS and Linux source .venv/bin/activate # On Windows (CMD) .venv\\Scripts\\activate.bat To install ChemMCP:\nuv pip install -e . --no-build-isolation Optional: Use an Existing Environment\nTo install ChemMCP in an existing Python or Conda environment:\n# Install dependencies pip install -r requirements # Install ChemMCP pip install -e --no-build-isolation Usage # ChemMCP supports two usage modes:\nMCP: Run ChemMCP as a Model Context Protocol (MCP) server to easily integrate with MCP-compatible clients like Claude Desktop and more.\nPython Calling: Use ChemMCP as a standard Python package directly in your Python code.\nThe following sections will walk you through the basic usage of both modes, after setting up required API keys.\nRequired API Keys # Set the following environment variables to enable tool functionality:\nCHEMSPACE_API_KEY: Get from ChemSpace\nRXN4CHEM_API_KEY: Get from IBM RXN4Chem\nTAVILY_API_KEY: Get from Tavily\nLLM_MODEL_NAME: Your preferred LLM model name (e.g., openai/gpt-4o) in LiteLLM format\nOther LLM credentials, such as OPENAI_API_KEY, or Azure-specific keys if using Azure OpenAI, detailed at LiteLLM usage\nTo use all tools, you\u0026rsquo;ll need all the above variables. If you only plan to use a subset, not all variables are required, and you can use our QuickConfig utility to auto-configure your tools. MCP Mode # You can run ChemMCP as an MCP server to integrate with different clients. Here we show two examples, and the configuration should be very similar for other senarios.\nClaude Desktop Integration # Follow this guide to set up the configuration file of Claude Desktop. The JSON config for ChemMCP:\n{ \u0026#34;mcpServers\u0026#34;: { \u0026#34;ChemMCP\u0026#34;: { \u0026#34;command\u0026#34;: \u0026#34;/ABSTRACT/PATH/TO/uv\u0026#34;, // Use `which uv` to get its path \u0026#34;args\u0026#34;: [\u0026#34;--directory\u0026#34;, \u0026#34;/PATH/TO/ChemMCP\u0026#34;, \u0026#34;run\u0026#34;, \u0026#34;-m\u0026#34;, \u0026#34;chemmcp\u0026#34;], \u0026#34;toolCallTimeoutMillis\u0026#34;: 300000, // Set this value because some tools may be slow in response of requests \u0026#34;env\u0026#34;: { \u0026#34;CHEMSPACE_API_KEY\u0026#34;: \u0026#34;API_KEY\u0026#34;, \u0026#34;RXN4CHEM_API_KEY\u0026#34;: \u0026#34;API_KEY\u0026#34;, \u0026#34;TAVILY_API_KEY\u0026#34;: \u0026#34;API_KEY\u0026#34;, \u0026#34;LLM_MODEL_NAME\u0026#34;: \u0026#34;openai/gpt-4o\u0026#34;, // Or any other LLM names supported by LiteLLM // Add required LLM credentials // ... } } } } Integration with LLM APIs (e.g., OpenAI Agents SDK) # LLM providers provide their SDKs to support MCP servers. Take OpenAI Agents SDK as an example, connect to ChemMCP with the following code:\nasync with MCPServerStdio( params={ \u0026#34;command\u0026#34;: \u0026#34;/ABSTRACT/PATH/TO/uv\u0026#34;, # Use `which uv` to get its path \u0026#34;args\u0026#34;: [\u0026#34;--directory\u0026#34;, \u0026#34;/ABSTRACT/PATH/TO/ChemMCP\u0026#34;, \u0026#34;run\u0026#34;, \u0026#34;-m\u0026#34;, \u0026#34;chemmcp\u0026#34;], \u0026#34;toolCallTimeoutMillis\u0026#34;: 300000, # Set this value because some tools may be slow in response of requests \u0026#34;env\u0026#34;: { \u0026#34;CHEMSPACE_API_KEY\u0026#34;: \u0026#34;API_KEY\u0026#34;, \u0026#34;RXN4CHEM_API_KEY\u0026#34;: \u0026#34;API_KEY\u0026#34;, \u0026#34;TAVILY_API_KEY\u0026#34;: \u0026#34;API_KEY\u0026#34;, \u0026#34;LLM_MODEL_NAME\u0026#34;: \u0026#34;openai/gpt-4o-2024-08-06\u0026#34;, # Or any other LLM names supported by LiteLLM # Aad required LLM credentials # ... } } ) as server: tools = await server.list_tools() Python Calling Mode # ChemMCP tools can also be called directly in Python:\nimport os from chemmcp.tools import WebSearch # or any of the tool names # Of course, you can set only those variables required by the tools to use envs = { \u0026#34;CHEMSPACE_API_KEY\u0026#34;: \u0026#34;API_KEY\u0026#34;, \u0026#34;RXN4CHEM_API_KEY\u0026#34;: \u0026#34;API_KEY\u0026#34;, \u0026#34;TAVILY_API_KEY\u0026#34;: \u0026#34;API_KEY\u0026#34;, \u0026#34;LLM_MODEL_NAME\u0026#34;: \u0026#34;openai/gpt-4o-2024-08-06\u0026#34;, # Or any other LLM names supported by LiteLLM # Aad required LLM credentials # ... } for key, value in envs: os.environ[key] = value web_search = WebSearch() result = web_search.run_code(\u0026#39;What is the boiling point of water?\u0026#39;) Available Tools # Currently, ChemMCP tools fall into three categories:\nGeneral Tools: General and broad information retrieval and web searching.\nMolecule Tools: Various analyses, predictions, and conversions related to chemical compounds and their properties.\nReaction Tools: Chemical reaction prediction and analysis.\nSee the full list and documentation on the Tools page.\nNext Steps # Browse all tools on the Tools page. Use QuickConfig to auto-configure tools based on your needs. Contribute your own tools or improve existing ones (see Dev Guide). Contact # Have questions or feedback?\nOpen an issue for bug reports or feature requests on our GitHub repository.\nEmail us at yu.3737 at osu.edu \u0026ndash; we are eager to know your ideas and suggestions!\n","externalUrl":null,"permalink":"/get-started/","section":"ChemMCP - Build your own AI chemistry co-scientist.","summary":"\u003cp\u003eChemMCP is a chemistry toolkit that empowers AI assistants with advanced chemistry capabilities.\u003c/p\u003e\n\u003cp\u003eThis guide will help you quickly set up and start using ChemMCP.\u003c/p\u003e\n\n\n\u003ch2 class=\"relative group\"\u003eQuick Setup \n    \u003cdiv id=\"quick-setup\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#quick-setup\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eInstall uv\u003c/strong\u003e\u003c/p\u003e","title":"Get Started","type":"page"},{"content":" Version: 0.1.0 Last Update: 2025/05/20 MCP Support Python Calling Support Predict the blood-brain barrier penetration of a molecule given its SMILES representation. Example\nInput:\nsmiles: \u0026#39;CCNC(=O)/C=C/C1=CC=CC(Br)=C1\u0026#39; Text Input (used for the run_text function in the Python calling mode):\nsmiles: \u0026#39;CCNC(=O)/C=C/C1=CC=CC(Br)=C1\u0026#39; Output:\nbbbp: \u0026#34;The probability of the compound to penetrate the blood-brain barrier is 99.90%, which means it\u0026#39;s likely to happen.\\nNote that the result is predicted by a neural network model and may not be accurate. You may use other tools or resources to obtain more reliable results if needed.\u0026#34; Usage # The tool supports both MCP mode and Python calling mode.\nMCP Mode # Configure your MCP client following its instructions with something like:\n{ \u0026#34;command\u0026#34;: \u0026#34;/ABSTRACT/PATH/TO/uv\u0026#34;, // Use `which uv` to get its path \u0026#34;args\u0026#34;: [\u0026#34;--directory\u0026#34;, \u0026#34;/ABSTRACT/PATH/TO/ChemMCP\u0026#34;, \u0026#34;run\u0026#34;, \u0026#34;--tools\u0026#34;, \u0026#34;BbbpPredictor\u0026#34;], \u0026#34;toolCallTimeoutMillis\u0026#34;: 300000, \u0026#34;env\u0026#34;: {} } Python Calling Mode # import os from chemmcp.tools import BbbpPredictor # Initialize the tool tool = BbbpPredictor() # The tool has two alternative ways to run: # 1. Run with separate input domains (recommended) output = tool.run_code( smiles=\u0026#39;CCNC(=O)/C=C/C1=CC=CC(Br)=C1\u0026#39; ) # 2. Run with text-only input output = tool.run_text( smiles=\u0026#39;CCNC(=O)/C=C/C1=CC=CC(Br)=C1\u0026#39; ) Each tool in ChemMCP has two ways to run:\nrun_code (recommended): The inputs contain one or more domains, each of which can be a str, an int, a float, etc. run_text: The inputs are a single string in a specific format. The tool will parse the string to extract the input domains. This is useful in scenarios where an agent framework calls tools only with text input. The output is the same in both cases. For the input and output domains, please refer to the tool\u0026rsquo;s signature.\nTool Signature # Input # Used in the MCP mode, as well as the run_code function in the Python calling mode.\nName Type Default Description smiles str N/A SMILES string of the molecule. Text Input # Used in the run_text function in the Python calling mode.\nName Type Default Description smiles str N/A SMILES string of the molecule. Output # The output is the same in both input cases.\nName Type Description bbbp str The probability of the compound to penetrate the blood-brain barrier. Envs # No required environment variables for this tool.\n","externalUrl":null,"permalink":"/tools/bbbp_predictor/","section":"ChemMCP Tools","summary":"\u003cdiv style=\"display: flex; flex-wrap: wrap; gap: 0.75rem; align-items: center;\"\u003e\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Version: 0.1.0\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Last Update: 2025/05/20\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    MCP Support\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Python Calling Support\n  \u003c/span\u003e\n\u003c/span\u003e\n\n\u003c/div\u003e\n\u003cdiv class=\"lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl\"\u003e\n  \u003cstrong\u003ePredict the blood-brain barrier penetration of a molecule given its SMILES representation.\u003c/strong\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong\u003eExample\u003c/strong\u003e\u003c/p\u003e","title":"BbbpPredictor (predict_bbbp)","type":"tools"},{"content":" This page lists the tools available in ChemMCP, which is actively maintained and continuously updated.\nEach tool has a name and a function name (in brackets, used in MCP). Click on a tool to view its documentation.\nCategories General Molecule Reaction Tags APIs CAS ChemSpace IUPAC LLMs Molecular Formulas Molecular Information Molecular Names Molecular Operations Molecular Properties Name Conversion Neural Networks PubChem QA RDKit Reaction Information Reaction Prediction SELFIES SMARTS SMILES Text Web Searching Filters Filters \u0026times; Categories General Molecule Reaction Tags APIs CAS ChemSpace IUPAC LLMs Molecular Formulas Molecular Information Molecular Names Molecular Operations Molecular Properties Name Conversion Neural Networks PubChem QA RDKit Reaction Information Reaction Prediction SELFIES SMARTS SMILES Text Web Searching BbbpPredictor (predict_bbbp) Predict the blood-brain barrier penetration of a molecule given its SMILES representation. Molecule Molecular Information Molecular Properties SMILES Neural Networks ForwardSynthesis (do_forward_synthesis) Given reactants and reagents, predict the product(s) of a chemical reaction. Reaction Reaction Prediction Neural Networks APIs SMILES FunctionalGroups (get_functional_groups) Get the functional groups in a molecule. Molecule Molecular Information RDKit SMILES HivInhibitorPredictor (predict_hiv_inhibitor) Predict the HIV inhibition of a molecule given its SMILES representation. Molecule Molecular Information Molecular Properties SMILES Neural Networks Iupac2Smiles (convert_iupac_to_smiles) Convert IUPAC name to SMILES string. Molecule Name Conversion SMILES IUPAC PubChem APIs ChemSpace LogDPredictor (predict_logd) Predict the logD of a molecule given its SMILES representation. Molecule Molecular Information Molecular Properties SMILES Neural Networks MoleculeAtomCount (count_molecule_atoms) Count the number of atoms of each type in a molecule. Molecule Molecular Information RDKit SMILES MoleculeCaptioner (generate_molecule_caption) Generate a textual description of the molecule from its SMILES representation with MolT5. This tool uses neural networks to generate descriptions, which may not be accurate or corr... Molecule Molecular Information Text Neural Networks SMILES MoleculeGenerator (generate_molecule_from_description) Generate a molecule represented in SMILES with MolT5 that matches the given textual description. Molecule Molecular Information Text Neural Networks SMILES MoleculePrice (get_molecule_price) Check the purchasability and get the cheapest available price of a molecule. Molecule Molecular Information ChemSpace APIs SMILES MoleculeSimilarity (cal_molecule_similarity) Get the Tanimoto similarity of two molecules. It Can also be used to check if two molecules are identical. Molecule Molecular Information RDKit SMILES Molecular Operations MoleculeWeight (cal_molecular_weight) Calculate molecular weight. Molecule Molecular Information Molecular Properties RDKit SMILES Name2Smiles (convert_chemical_name_to_smiles) Convert chemical name to SMILES string. Molecule Name Conversion SMILES Molecular Names PubChem APIs PatentCheck (check_molecule_if_patented) Get whether a molecule is patented or not. Molecule Molecular Information SMILES APIs PubchemSearch (search_pubchem) Search for molecule/compound information on PubChem, one of the most comprehensive database of chemical molecules and their activities. You can get authoritative information about ... Molecule PubChem Molecular Information Molecular Properties SMILES IUPAC Molecular Names APIs PubchemSearchQA (search_pubchem_qa) Answer questions about molecules/compounds based on the information from PubChem, one of the most comprehensive database of chemical molecules and their activities. You can get aut... Molecule PubChem Molecular Information Molecular Properties SMILES IUPAC Molecular Names APIs QA LLMs Retrosynthesis (do_retrosynthesis) Conduct single-step retrosynthesis. Given the product(s), predict multiple sets of potential reactants, along with their confidence. Reaction Reaction Prediction Neural Networks APIs SMILES Selfies2Smiles (convert_selfies_to_smiles) Convert SELFIES to SMILES string. Molecule SMILES SELFIES Name Conversion SideEffectPredictor (predict_side_effect) Predict whether a molecule can cause 20 different side effects, along with the probabilities of each side effect. The side effects are: (1) Blood and lymphatic system disorders; (2... Molecule Molecular Information Molecular Properties SMILES Neural Networks SmartsCheck (check_smarts) Check the syntactical validity of a reaction SMART string ([reactant SMILES]\u0026gt;[reagent SMILES]\u0026gt;[product SMILES]). Molecule Reaction SMILES SMARTS RDKit Molecular Information Reaction Information Smiles2Cas (convert_smiles_to_cas) Convert SMILES to CAS number based on PubChem. Molecule Name Conversion SMILES CAS PubChem APIs Smiles2Formula (convert_smiles_to_formula) Convert SMILES to molecular formula. Molecule Name Conversion Molecular Formulas SMILES RDKit Smiles2Iupac (convert_smiles_to_iupac) Convert SMILES to IUPAC name. Molecule Name Conversion SMILES IUPAC PubChem APIs Smiles2Selfies (convert_smiles_to_selfies) Convert SMILES to SELFIES string. Molecule Name Conversion SMILES SELFIES SmilesCanonicalization (canonicalize_smiles) Canonicalize a molecular SMILES string. Molecule SMILES RDKit Molecular Operations SmilesCheck (check_smiles) Check the syntactical validity of a molecular SMILES string. Molecule SMILES RDKit Molecular Information SolubilityPredictor (predict_solubility) Predict the solubility of a molecule given its SMILES representation. Molecule Molecular Information Molecular Properties SMILES Neural Networks ToxicityPredictor (predict_toxicity) Predict the toxicity of a molecule given its SMILES representation. Molecule Molecular Information Molecular Properties SMILES Neural Networks WebSearch (search_web) Search the web for any questions and knowledge and obtain a concise answer based on thesearch results. General Web Searching LLMs Neural Networks APIs ","externalUrl":null,"permalink":"/tools/","section":"ChemMCP Tools","summary":"\u003cdiv class=\"lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl\"\u003e\n  \u003cp\u003eThis page lists the tools available in ChemMCP, which is actively maintained and continuously updated.\u003c/p\u003e\n\u003cp\u003eEach tool has a name and a function name (in brackets, used in MCP). Click on a tool to view its documentation.\u003c/p\u003e","title":"ChemMCP Tools","type":"tools"},{"content":" Version: 0.1.0 Last Update: 2025/05/20 MCP Support Python Calling Support Given reactants and reagents, predict the product(s) of a chemical reaction. Example\nInput:\nreactants_and_reagents_smiles: \u0026#39;CCN.CN1C=CC=C1C=O\u0026#39; Text Input (used for the run_text function in the Python calling mode):\nreactants_and_reagents_smiles: \u0026#39;CCN.CN1C=CC=C1C=O\u0026#39; Output:\nproduct_smiles: \u0026#39;CCNCc1cccn1C\u0026#39; Usage # The tool supports both MCP mode and Python calling mode.\nEnvironment Variables # This tool requires the following environment variables:\nRXN4CHEM_API_KEY: The API key for IBM RXN4Chem. MCP Mode # Configure your MCP client following its instructions with something like:\n{ \u0026#34;command\u0026#34;: \u0026#34;/ABSTRACT/PATH/TO/uv\u0026#34;, // Use `which uv` to get its path \u0026#34;args\u0026#34;: [\u0026#34;--directory\u0026#34;, \u0026#34;/ABSTRACT/PATH/TO/ChemMCP\u0026#34;, \u0026#34;run\u0026#34;, \u0026#34;--tools\u0026#34;, \u0026#34;ForwardSynthesis\u0026#34;], \u0026#34;toolCallTimeoutMillis\u0026#34;: 300000, \u0026#34;env\u0026#34;: { \u0026#34;RXN4CHEM_API_KEY\u0026#34;: \u0026#34;VALUE_TO_BE_SET\u0026#34; } } Python Calling Mode # import os from chemmcp.tools import ForwardSynthesis # Set the environment variables os.environ[\u0026#39;RXN4CHEM_API_KEY\u0026#39;] = \u0026#39;VALUE_TO_BE_SET\u0026#39; # Initialize the tool tool = ForwardSynthesis() # The tool has two alternative ways to run: # 1. Run with separate input domains (recommended) output = tool.run_code( reactants_and_reagents_smiles=\u0026#39;CCN.CN1C=CC=C1C=O\u0026#39; ) # 2. Run with text-only input output = tool.run_text( reactants_and_reagents_smiles=\u0026#39;CCN.CN1C=CC=C1C=O\u0026#39; ) Each tool in ChemMCP has two ways to run:\nrun_code (recommended): The inputs contain one or more domains, each of which can be a str, an int, a float, etc. run_text: The inputs are a single string in a specific format. The tool will parse the string to extract the input domains. This is useful in scenarios where an agent framework calls tools only with text input. The output is the same in both cases. For the input and output domains, please refer to the tool\u0026rsquo;s signature.\nTool Signature # Input # Used in the MCP mode, as well as the run_code function in the Python calling mode.\nName Type Default Description reactants_and_reagents_smiles str N/A The SMILES of the reactants and reagents separated by a dot \u0026lsquo;.\u0026rsquo;. Text Input # Used in the run_text function in the Python calling mode.\nName Type Default Description reactants_and_reagents_smiles str N/A The SMILES of the reactants and reagents separated by a dot \u0026lsquo;.\u0026rsquo;. Output # The output is the same in both input cases.\nName Type Description product_smiles str The SMILES of the product(s). Envs # Name Description RXN4CHEM_API_KEY The API key for IBM RXN4Chem. ","externalUrl":null,"permalink":"/tools/forward_synthesis/","section":"ChemMCP Tools","summary":"\u003cdiv style=\"display: flex; flex-wrap: wrap; gap: 0.75rem; align-items: center;\"\u003e\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Version: 0.1.0\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Last Update: 2025/05/20\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    MCP Support\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Python Calling Support\n  \u003c/span\u003e\n\u003c/span\u003e\n\n\u003c/div\u003e\n\u003cdiv class=\"lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl\"\u003e\n  \u003cstrong\u003eGiven reactants and reagents, predict the product(s) of a chemical reaction.\u003c/strong\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong\u003eExample\u003c/strong\u003e\u003c/p\u003e","title":"ForwardSynthesis (do_forward_synthesis)","type":"tools"},{"content":" Version: 0.1.0 Last Update: 2025/05/20 MCP Support Python Calling Support Get the functional groups in a molecule. Example\nInput:\nsmiles: \u0026#39;CCO\u0026#39; Text Input (used for the run_text function in the Python calling mode):\nsmiles: \u0026#39;CCO\u0026#39; Output:\nfgs: \u0026#39;This molecule contains alcohol groups, and side-chain hydroxyls.\u0026#39; Usage # The tool supports both MCP mode and Python calling mode.\nMCP Mode # Configure your MCP client following its instructions with something like:\n{ \u0026#34;command\u0026#34;: \u0026#34;/ABSTRACT/PATH/TO/uv\u0026#34;, // Use `which uv` to get its path \u0026#34;args\u0026#34;: [\u0026#34;--directory\u0026#34;, \u0026#34;/ABSTRACT/PATH/TO/ChemMCP\u0026#34;, \u0026#34;run\u0026#34;, \u0026#34;--tools\u0026#34;, \u0026#34;FunctionalGroups\u0026#34;], \u0026#34;toolCallTimeoutMillis\u0026#34;: 300000, \u0026#34;env\u0026#34;: {} } Python Calling Mode # import os from chemmcp.tools import FunctionalGroups # Initialize the tool tool = FunctionalGroups() # The tool has two alternative ways to run: # 1. Run with separate input domains (recommended) output = tool.run_code( smiles=\u0026#39;CCO\u0026#39; ) # 2. Run with text-only input output = tool.run_text( smiles=\u0026#39;CCO\u0026#39; ) Each tool in ChemMCP has two ways to run:\nrun_code (recommended): The inputs contain one or more domains, each of which can be a str, an int, a float, etc. run_text: The inputs are a single string in a specific format. The tool will parse the string to extract the input domains. This is useful in scenarios where an agent framework calls tools only with text input. The output is the same in both cases. For the input and output domains, please refer to the tool\u0026rsquo;s signature.\nTool Signature # Input # Used in the MCP mode, as well as the run_code function in the Python calling mode.\nName Type Default Description smiles str N/A SMILES string of the molecule. Text Input # Used in the run_text function in the Python calling mode.\nName Type Default Description smiles str N/A SMILES string of the molecule. Output # The output is the same in both input cases.\nName Type Description fgs str A description of functional groups in the molecule. Envs # No required environment variables for this tool.\n","externalUrl":null,"permalink":"/tools/functional_groups/","section":"ChemMCP Tools","summary":"\u003cdiv style=\"display: flex; flex-wrap: wrap; gap: 0.75rem; align-items: center;\"\u003e\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Version: 0.1.0\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Last Update: 2025/05/20\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    MCP Support\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Python Calling Support\n  \u003c/span\u003e\n\u003c/span\u003e\n\n\u003c/div\u003e\n\u003cdiv class=\"lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl\"\u003e\n  \u003cstrong\u003eGet the functional groups in a molecule.\u003c/strong\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong\u003eExample\u003c/strong\u003e\u003c/p\u003e","title":"FunctionalGroups (get_functional_groups)","type":"tools"},{"content":" Version: 0.1.0 Last Update: 2025/05/20 MCP Support Python Calling Support Predict the HIV inhibition of a molecule given its SMILES representation. Example\nInput:\nsmiles: \u0026#39;CC1=CN(C2C=CCCC2O)C(=O)NC1=O\u0026#39; Text Input (used for the run_text function in the Python calling mode):\nsmiles: \u0026#39;CC1=CN(C2C=CCCC2O)C(=O)NC1=O\u0026#39; Output:\nhiv: \u0026#34;The probability of the compound to be an inhibitor of HIV replication is 6.01%, which means it\u0026#39;s unlikely to happen.\\nNote that the result is predicted by a neural network model and may not be accurate. You may use other tools or resources to obtain more reliable results if needed.\u0026#34; Usage # The tool supports both MCP mode and Python calling mode.\nMCP Mode # Configure your MCP client following its instructions with something like:\n{ \u0026#34;command\u0026#34;: \u0026#34;/ABSTRACT/PATH/TO/uv\u0026#34;, // Use `which uv` to get its path \u0026#34;args\u0026#34;: [\u0026#34;--directory\u0026#34;, \u0026#34;/ABSTRACT/PATH/TO/ChemMCP\u0026#34;, \u0026#34;run\u0026#34;, \u0026#34;--tools\u0026#34;, \u0026#34;HivInhibitorPredictor\u0026#34;], \u0026#34;toolCallTimeoutMillis\u0026#34;: 300000, \u0026#34;env\u0026#34;: {} } Python Calling Mode # import os from chemmcp.tools import HivInhibitorPredictor # Initialize the tool tool = HivInhibitorPredictor() # The tool has two alternative ways to run: # 1. Run with separate input domains (recommended) output = tool.run_code( smiles=\u0026#39;CC1=CN(C2C=CCCC2O)C(=O)NC1=O\u0026#39; ) # 2. Run with text-only input output = tool.run_text( smiles=\u0026#39;CC1=CN(C2C=CCCC2O)C(=O)NC1=O\u0026#39; ) Each tool in ChemMCP has two ways to run:\nrun_code (recommended): The inputs contain one or more domains, each of which can be a str, an int, a float, etc. run_text: The inputs are a single string in a specific format. The tool will parse the string to extract the input domains. This is useful in scenarios where an agent framework calls tools only with text input. The output is the same in both cases. For the input and output domains, please refer to the tool\u0026rsquo;s signature.\nTool Signature # Input # Used in the MCP mode, as well as the run_code function in the Python calling mode.\nName Type Default Description smiles str N/A SMILES string of the molecule. Text Input # Used in the run_text function in the Python calling mode.\nName Type Default Description smiles str N/A SMILES string of the molecule. Output # The output is the same in both input cases.\nName Type Description hiv str The probability of the compound to be an inhibitor of HIV replication. Envs # No required environment variables for this tool.\n","externalUrl":null,"permalink":"/tools/hiv_inhibitor_predictor/","section":"ChemMCP Tools","summary":"\u003cdiv style=\"display: flex; flex-wrap: wrap; gap: 0.75rem; align-items: center;\"\u003e\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Version: 0.1.0\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Last Update: 2025/05/20\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    MCP Support\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Python Calling Support\n  \u003c/span\u003e\n\u003c/span\u003e\n\n\u003c/div\u003e\n\u003cdiv class=\"lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl\"\u003e\n  \u003cstrong\u003ePredict the HIV inhibition of a molecule given its SMILES representation.\u003c/strong\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong\u003eExample\u003c/strong\u003e\u003c/p\u003e","title":"HivInhibitorPredictor (predict_hiv_inhibitor)","type":"tools"},{"content":" Version: 0.1.0 Last Update: 2025/05/20 MCP Support Python Calling Support Convert IUPAC name to SMILES string. Example\nInput:\niupac: \u0026#39;ethanol\u0026#39; Text Input (used for the run_text function in the Python calling mode):\niupac: \u0026#39;ethanol\u0026#39; Output:\nsmiles: \u0026#39;CCO\u0026#39; Usage # The tool supports both MCP mode and Python calling mode.\nMCP Mode # Configure your MCP client following its instructions with something like:\n{ \u0026#34;command\u0026#34;: \u0026#34;/ABSTRACT/PATH/TO/uv\u0026#34;, // Use `which uv` to get its path \u0026#34;args\u0026#34;: [\u0026#34;--directory\u0026#34;, \u0026#34;/ABSTRACT/PATH/TO/ChemMCP\u0026#34;, \u0026#34;run\u0026#34;, \u0026#34;--tools\u0026#34;, \u0026#34;Iupac2Smiles\u0026#34;], \u0026#34;toolCallTimeoutMillis\u0026#34;: 300000, \u0026#34;env\u0026#34;: {} } Python Calling Mode # import os from chemmcp.tools import Iupac2Smiles # Initialize the tool tool = Iupac2Smiles() # The tool has two alternative ways to run: # 1. Run with separate input domains (recommended) output = tool.run_code( iupac=\u0026#39;ethanol\u0026#39; ) # 2. Run with text-only input output = tool.run_text( iupac=\u0026#39;ethanol\u0026#39; ) Each tool in ChemMCP has two ways to run:\nrun_code (recommended): The inputs contain one or more domains, each of which can be a str, an int, a float, etc. run_text: The inputs are a single string in a specific format. The tool will parse the string to extract the input domains. This is useful in scenarios where an agent framework calls tools only with text input. The output is the same in both cases. For the input and output domains, please refer to the tool\u0026rsquo;s signature.\nTool Signature # Input # Used in the MCP mode, as well as the run_code function in the Python calling mode.\nName Type Default Description iupac str N/A IUPAC name of the molecule Text Input # Used in the run_text function in the Python calling mode.\nName Type Default Description iupac str N/A IUPAC name of the molecule Output # The output is the same in both input cases.\nName Type Description smiles str SMILES string of the molecule Envs # No required environment variables for this tool.\n","externalUrl":null,"permalink":"/tools/iupac2smiles/","section":"ChemMCP Tools","summary":"\u003cdiv style=\"display: flex; flex-wrap: wrap; gap: 0.75rem; align-items: center;\"\u003e\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Version: 0.1.0\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Last Update: 2025/05/20\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    MCP Support\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Python Calling Support\n  \u003c/span\u003e\n\u003c/span\u003e\n\n\u003c/div\u003e\n\u003cdiv class=\"lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl\"\u003e\n  \u003cstrong\u003eConvert IUPAC name to SMILES string.\u003c/strong\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong\u003eExample\u003c/strong\u003e\u003c/p\u003e","title":"Iupac2Smiles (convert_iupac_to_smiles)","type":"tools"},{"content":" Version: 0.1.0 Last Update: 2025/05/20 MCP Support Python Calling Support Predict the logD of a molecule given its SMILES representation. Example\nInput:\nsmiles: \u0026#39;NC(=O)C1=CC=CC=C1O\u0026#39; Text Input (used for the run_text function in the Python calling mode):\nsmiles: \u0026#39;NC(=O)C1=CC=CC=C1O\u0026#39; Output:\nlogd: \u0026#39;The octanol/water distribution coefficient logD under the circumstance of pH 7.4 is 1.090.\\nNote that the result is predicted by a neural network model and may not be accurate. You may use other tools or resources to obtain more reliable results if needed.\u0026#39; Usage # The tool supports both MCP mode and Python calling mode.\nMCP Mode # Configure your MCP client following its instructions with something like:\n{ \u0026#34;command\u0026#34;: \u0026#34;/ABSTRACT/PATH/TO/uv\u0026#34;, // Use `which uv` to get its path \u0026#34;args\u0026#34;: [\u0026#34;--directory\u0026#34;, \u0026#34;/ABSTRACT/PATH/TO/ChemMCP\u0026#34;, \u0026#34;run\u0026#34;, \u0026#34;--tools\u0026#34;, \u0026#34;LogDPredictor\u0026#34;], \u0026#34;toolCallTimeoutMillis\u0026#34;: 300000, \u0026#34;env\u0026#34;: {} } Python Calling Mode # import os from chemmcp.tools import LogDPredictor # Initialize the tool tool = LogDPredictor() # The tool has two alternative ways to run: # 1. Run with separate input domains (recommended) output = tool.run_code( smiles=\u0026#39;NC(=O)C1=CC=CC=C1O\u0026#39; ) # 2. Run with text-only input output = tool.run_text( smiles=\u0026#39;NC(=O)C1=CC=CC=C1O\u0026#39; ) Each tool in ChemMCP has two ways to run:\nrun_code (recommended): The inputs contain one or more domains, each of which can be a str, an int, a float, etc. run_text: The inputs are a single string in a specific format. The tool will parse the string to extract the input domains. This is useful in scenarios where an agent framework calls tools only with text input. The output is the same in both cases. For the input and output domains, please refer to the tool\u0026rsquo;s signature.\nTool Signature # Input # Used in the MCP mode, as well as the run_code function in the Python calling mode.\nName Type Default Description smiles str N/A SMILES string of the molecule. Text Input # Used in the run_text function in the Python calling mode.\nName Type Default Description smiles str N/A SMILES string of the molecule. Output # The output is the same in both input cases.\nName Type Description logd str The octanol/water distribution coefficient logD under the circumstance of pH 7.4. Envs # No required environment variables for this tool.\n","externalUrl":null,"permalink":"/tools/logd_predictor/","section":"ChemMCP Tools","summary":"\u003cdiv style=\"display: flex; flex-wrap: wrap; gap: 0.75rem; align-items: center;\"\u003e\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Version: 0.1.0\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Last Update: 2025/05/20\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    MCP Support\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Python Calling Support\n  \u003c/span\u003e\n\u003c/span\u003e\n\n\u003c/div\u003e\n\u003cdiv class=\"lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl\"\u003e\n  \u003cstrong\u003ePredict the logD of a molecule given its SMILES representation.\u003c/strong\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong\u003eExample\u003c/strong\u003e\u003c/p\u003e","title":"LogDPredictor (predict_logd)","type":"tools"},{"content":" Version: 0.1.0 Last Update: 2025/05/20 MCP Support Python Calling Support Count the number of atoms of each type in a molecule. Example\nInput:\nsmiles: \u0026#39;CCO\u0026#39; Text Input (used for the run_text function in the Python calling mode):\nsmiles: \u0026#39;CCO\u0026#39; Output:\natom_counts: \u0026#34;There are altogether 3 atoms (omitting hydrogen atoms). The types and corresponding numbers are: {\u0026#39;C\u0026#39;: 2, \u0026#39;O\u0026#39;: 1}\u0026#34; Usage # The tool supports both MCP mode and Python calling mode.\nMCP Mode # Configure your MCP client following its instructions with something like:\n{ \u0026#34;command\u0026#34;: \u0026#34;/ABSTRACT/PATH/TO/uv\u0026#34;, // Use `which uv` to get its path \u0026#34;args\u0026#34;: [\u0026#34;--directory\u0026#34;, \u0026#34;/ABSTRACT/PATH/TO/ChemMCP\u0026#34;, \u0026#34;run\u0026#34;, \u0026#34;--tools\u0026#34;, \u0026#34;MoleculeAtomCount\u0026#34;], \u0026#34;toolCallTimeoutMillis\u0026#34;: 300000, \u0026#34;env\u0026#34;: {} } Python Calling Mode # import os from chemmcp.tools import MoleculeAtomCount # Initialize the tool tool = MoleculeAtomCount() # The tool has two alternative ways to run: # 1. Run with separate input domains (recommended) output = tool.run_code( smiles=\u0026#39;CCO\u0026#39; ) # 2. Run with text-only input output = tool.run_text( smiles=\u0026#39;CCO\u0026#39; ) Each tool in ChemMCP has two ways to run:\nrun_code (recommended): The inputs contain one or more domains, each of which can be a str, an int, a float, etc. run_text: The inputs are a single string in a specific format. The tool will parse the string to extract the input domains. This is useful in scenarios where an agent framework calls tools only with text input. The output is the same in both cases. For the input and output domains, please refer to the tool\u0026rsquo;s signature.\nTool Signature # Input # Used in the MCP mode, as well as the run_code function in the Python calling mode.\nName Type Default Description smiles str N/A SMILES string of the molecule. Text Input # Used in the run_text function in the Python calling mode.\nName Type Default Description smiles str N/A SMILES string of the molecule. Output # The output is the same in both input cases.\nName Type Description atom_counts str A description of atom numbers in the molecule. Envs # No required environment variables for this tool.\n","externalUrl":null,"permalink":"/tools/molecule_atom_count/","section":"ChemMCP Tools","summary":"\u003cdiv style=\"display: flex; flex-wrap: wrap; gap: 0.75rem; align-items: center;\"\u003e\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Version: 0.1.0\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Last Update: 2025/05/20\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    MCP Support\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Python Calling Support\n  \u003c/span\u003e\n\u003c/span\u003e\n\n\u003c/div\u003e\n\u003cdiv class=\"lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl\"\u003e\n  \u003cstrong\u003eCount the number of atoms of each type in a molecule.\u003c/strong\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong\u003eExample\u003c/strong\u003e\u003c/p\u003e","title":"MoleculeAtomCount (count_molecule_atoms)","type":"tools"},{"content":" Version: 0.1.0 Last Update: 2025/05/20 MCP Support Python Calling Support Generate a textual description of the molecule from its SMILES representation with MolT5. This tool uses neural networks to generate descriptions, which may not be accurate or correct. Please first try other tools that provide accurate and authoritative information, and only use this one as the last resort. Example\nInput:\nsmiles: \u0026#39;CCO\u0026#39; Text Input (used for the run_text function in the Python calling mode):\nsmiles: \u0026#39;CCO\u0026#39; Output:\ndescription: \u0026#39;The molecule is an ether in which the oxygen atom is linked to two ethyl groups. It has a role as an inhalation anaesthetic, a non-polar solvent and a refrigerant. It is a volatile organic compound and an ether.\\n\\nNote: This is a generated description and may not be accurate. Please double check the result.\u0026#39; Usage # The tool supports both MCP mode and Python calling mode.\nMCP Mode # Configure your MCP client following its instructions with something like:\n{ \u0026#34;command\u0026#34;: \u0026#34;/ABSTRACT/PATH/TO/uv\u0026#34;, // Use `which uv` to get its path \u0026#34;args\u0026#34;: [\u0026#34;--directory\u0026#34;, \u0026#34;/ABSTRACT/PATH/TO/ChemMCP\u0026#34;, \u0026#34;run\u0026#34;, \u0026#34;--tools\u0026#34;, \u0026#34;MoleculeCaptioner\u0026#34;], \u0026#34;toolCallTimeoutMillis\u0026#34;: 300000, \u0026#34;env\u0026#34;: {} } Python Calling Mode # import os from chemmcp.tools import MoleculeCaptioner # Initialize the tool tool = MoleculeCaptioner() # The tool has two alternative ways to run: # 1. Run with separate input domains (recommended) output = tool.run_code( smiles=\u0026#39;CCO\u0026#39; ) # 2. Run with text-only input output = tool.run_text( smiles=\u0026#39;CCO\u0026#39; ) Each tool in ChemMCP has two ways to run:\nrun_code (recommended): The inputs contain one or more domains, each of which can be a str, an int, a float, etc. run_text: The inputs are a single string in a specific format. The tool will parse the string to extract the input domains. This is useful in scenarios where an agent framework calls tools only with text input. The output is the same in both cases. For the input and output domains, please refer to the tool\u0026rsquo;s signature.\nTool Signature # Input # Used in the MCP mode, as well as the run_code function in the Python calling mode.\nName Type Default Description smiles str N/A SMILES representation of the molecule. Text Input # Used in the run_text function in the Python calling mode.\nName Type Default Description smiles str N/A SMILES representation of the molecule. Output # The output is the same in both input cases.\nName Type Description description str Textual description of the molecule. Envs # No required environment variables for this tool.\n","externalUrl":null,"permalink":"/tools/molecule_captioner/","section":"ChemMCP Tools","summary":"\u003cdiv style=\"display: flex; flex-wrap: wrap; gap: 0.75rem; align-items: center;\"\u003e\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Version: 0.1.0\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Last Update: 2025/05/20\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    MCP Support\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Python Calling Support\n  \u003c/span\u003e\n\u003c/span\u003e\n\n\u003c/div\u003e\n\u003cdiv class=\"lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl\"\u003e\n  \u003cstrong\u003eGenerate a textual description of the molecule from its SMILES representation with MolT5. This tool uses neural networks to generate descriptions, which may not be accurate or correct. Please first try other tools that provide accurate and authoritative information, and only use this one as the last resort.\u003c/strong\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong\u003eExample\u003c/strong\u003e\u003c/p\u003e","title":"MoleculeCaptioner (generate_molecule_caption)","type":"tools"},{"content":" Version: 0.1.0 Last Update: 2025/05/20 MCP Support Python Calling Support Generate a molecule represented in SMILES with MolT5 that matches the given textual description. Example\nInput:\ndescription: \u0026#39;The molecule is an ether in which the oxygen atom is linked to two ethyl groups. It has a role as an inhalation anaesthetic, a non-polar solvent and a refrigerant. It is a volatile organic compound and an ether.\u0026#39; Text Input (used for the run_text function in the Python calling mode):\ndescription: \u0026#39;The molecule is an ether in which the oxygen atom is linked to two ethyl groups. It has a role as an inhalation anaesthetic, a non-polar solvent and a refrigerant. It is a volatile organic compound and an ether.\u0026#39; Output:\nsmiles: \u0026#39;CCO\\n\\nNote: This is a generated SMILES and may not be accurate. Please double check the result.\u0026#39; Usage # The tool supports both MCP mode and Python calling mode.\nMCP Mode # Configure your MCP client following its instructions with something like:\n{ \u0026#34;command\u0026#34;: \u0026#34;/ABSTRACT/PATH/TO/uv\u0026#34;, // Use `which uv` to get its path \u0026#34;args\u0026#34;: [\u0026#34;--directory\u0026#34;, \u0026#34;/ABSTRACT/PATH/TO/ChemMCP\u0026#34;, \u0026#34;run\u0026#34;, \u0026#34;--tools\u0026#34;, \u0026#34;MoleculeGenerator\u0026#34;], \u0026#34;toolCallTimeoutMillis\u0026#34;: 300000, \u0026#34;env\u0026#34;: {} } Python Calling Mode # import os from chemmcp.tools import MoleculeGenerator # Initialize the tool tool = MoleculeGenerator() # The tool has two alternative ways to run: # 1. Run with separate input domains (recommended) output = tool.run_code( description=\u0026#39;The molecule is an ether in which the oxygen atom is linked to two ethyl groups. It has a role as an inhalation anaesthetic, a non-polar solvent and a refrigerant. It is a volatile organic compound and an ether.\u0026#39; ) # 2. Run with text-only input output = tool.run_text( description=\u0026#39;The molecule is an ether in which the oxygen atom is linked to two ethyl groups. It has a role as an inhalation anaesthetic, a non-polar solvent and a refrigerant. It is a volatile organic compound and an ether.\u0026#39; ) Each tool in ChemMCP has two ways to run:\nrun_code (recommended): The inputs contain one or more domains, each of which can be a str, an int, a float, etc. run_text: The inputs are a single string in a specific format. The tool will parse the string to extract the input domains. This is useful in scenarios where an agent framework calls tools only with text input. The output is the same in both cases. For the input and output domains, please refer to the tool\u0026rsquo;s signature.\nTool Signature # Input # Used in the MCP mode, as well as the run_code function in the Python calling mode.\nName Type Default Description description str N/A Textual description of the molecule. Text Input # Used in the run_text function in the Python calling mode.\nName Type Default Description description str N/A Textual description of the molecule. Output # The output is the same in both input cases.\nName Type Description smiles str SMILES representation of the molecule. Envs # No required environment variables for this tool.\n","externalUrl":null,"permalink":"/tools/molecule_generator/","section":"ChemMCP Tools","summary":"\u003cdiv style=\"display: flex; flex-wrap: wrap; gap: 0.75rem; align-items: center;\"\u003e\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Version: 0.1.0\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Last Update: 2025/05/20\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    MCP Support\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Python Calling Support\n  \u003c/span\u003e\n\u003c/span\u003e\n\n\u003c/div\u003e\n\u003cdiv class=\"lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl\"\u003e\n  \u003cstrong\u003eGenerate a molecule represented in SMILES with MolT5 that matches the given textual description.\u003c/strong\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong\u003eExample\u003c/strong\u003e\u003c/p\u003e","title":"MoleculeGenerator (generate_molecule_from_description)","type":"tools"},{"content":" Version: 0.1.1 Last Update: 2025/05/24 MCP Support Python Calling Support Check the purchasability and get the cheapest available price of a molecule. Example\nInput:\nsmiles: \u0026#39;CCO\u0026#39; Text Input (used for the run_text function in the Python calling mode):\nsmiles: \u0026#39;CCO\u0026#39; Output:\nprice: \u0026#39;25g of this molecule cost 143 USD and can be purchased at A2B Chem.\u0026#39; Usage # The tool supports both MCP mode and Python calling mode.\nEnvironment Variables # This tool requires the following environment variables:\nCHEMSPACE_API_KEY: The API key for ChemSpace. MCP Mode # Configure your MCP client following its instructions with something like:\n{ \u0026#34;command\u0026#34;: \u0026#34;/ABSTRACT/PATH/TO/uv\u0026#34;, // Use `which uv` to get its path \u0026#34;args\u0026#34;: [\u0026#34;--directory\u0026#34;, \u0026#34;/ABSTRACT/PATH/TO/ChemMCP\u0026#34;, \u0026#34;run\u0026#34;, \u0026#34;--tools\u0026#34;, \u0026#34;MoleculePrice\u0026#34;], \u0026#34;toolCallTimeoutMillis\u0026#34;: 300000, \u0026#34;env\u0026#34;: { \u0026#34;CHEMSPACE_API_KEY\u0026#34;: \u0026#34;VALUE_TO_BE_SET\u0026#34; } } Python Calling Mode # import os from chemmcp.tools import MoleculePrice # Set the environment variables os.environ[\u0026#39;CHEMSPACE_API_KEY\u0026#39;] = \u0026#39;VALUE_TO_BE_SET\u0026#39; # Initialize the tool tool = MoleculePrice() # The tool has two alternative ways to run: # 1. Run with separate input domains (recommended) output = tool.run_code( smiles=\u0026#39;CCO\u0026#39; ) # 2. Run with text-only input output = tool.run_text( smiles=\u0026#39;CCO\u0026#39; ) Each tool in ChemMCP has two ways to run:\nrun_code (recommended): The inputs contain one or more domains, each of which can be a str, an int, a float, etc. run_text: The inputs are a single string in a specific format. The tool will parse the string to extract the input domains. This is useful in scenarios where an agent framework calls tools only with text input. The output is the same in both cases. For the input and output domains, please refer to the tool\u0026rsquo;s signature.\nTool Signature # Input # Used in the MCP mode, as well as the run_code function in the Python calling mode.\nName Type Default Description smiles str N/A SMILES string of the molecule Text Input # Used in the run_text function in the Python calling mode.\nName Type Default Description smiles str N/A SMILES string of the molecule Output # The output is the same in both input cases.\nName Type Description price str Description of the cheapest available price of the molecule Envs # Name Description CHEMSPACE_API_KEY The API key for ChemSpace. ","externalUrl":null,"permalink":"/tools/molecule_price/","section":"ChemMCP Tools","summary":"\u003cdiv style=\"display: flex; flex-wrap: wrap; gap: 0.75rem; align-items: center;\"\u003e\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Version: 0.1.1\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Last Update: 2025/05/24\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    MCP Support\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Python Calling Support\n  \u003c/span\u003e\n\u003c/span\u003e\n\n\u003c/div\u003e\n\u003cdiv class=\"lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl\"\u003e\n  \u003cstrong\u003eCheck the purchasability and get the cheapest available price of a molecule.\u003c/strong\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong\u003eExample\u003c/strong\u003e\u003c/p\u003e","title":"MoleculePrice (get_molecule_price)","type":"tools"},{"content":" Version: 0.1.0 Last Update: 2025/05/20 MCP Support Python Calling Support Get the Tanimoto similarity of two molecules. It Can also be used to check if two molecules are identical. Example 2\nInput:\nsmiles1: \u0026#39;CCO\u0026#39; smiles2: \u0026#39;C(O)C\u0026#39; Text Input (used for the run_text function in the Python calling mode):\nsmiles_pair: \u0026#39;CCO;C(O)C\u0026#39; Output:\nsimilarity: \u0026#39;Input Molecules Are Identical\u0026#39; Usage # The tool supports both MCP mode and Python calling mode.\nMCP Mode # Configure your MCP client following its instructions with something like:\n{ \u0026#34;command\u0026#34;: \u0026#34;/ABSTRACT/PATH/TO/uv\u0026#34;, // Use `which uv` to get its path \u0026#34;args\u0026#34;: [\u0026#34;--directory\u0026#34;, \u0026#34;/ABSTRACT/PATH/TO/ChemMCP\u0026#34;, \u0026#34;run\u0026#34;, \u0026#34;--tools\u0026#34;, \u0026#34;MoleculeSimilarity\u0026#34;], \u0026#34;toolCallTimeoutMillis\u0026#34;: 300000, \u0026#34;env\u0026#34;: {} } Python Calling Mode # import os from chemmcp.tools import MoleculeSimilarity # Initialize the tool tool = MoleculeSimilarity() # The tool has two alternative ways to run: # 1. Run with separate input domains (recommended) output = tool.run_code( smiles1=\u0026#39;CCO\u0026#39; smiles2=\u0026#39;CCN\u0026#39; ) # 2. Run with text-only input output = tool.run_text( smiles_pair=\u0026#39;CCO;CCN\u0026#39; ) Each tool in ChemMCP has two ways to run:\nrun_code (recommended): The inputs contain one or more domains, each of which can be a str, an int, a float, etc. run_text: The inputs are a single string in a specific format. The tool will parse the string to extract the input domains. This is useful in scenarios where an agent framework calls tools only with text input. The output is the same in both cases. For the input and output domains, please refer to the tool\u0026rsquo;s signature.\nTool Signature # Input # Used in the MCP mode, as well as the run_code function in the Python calling mode.\nName Type Default Description smiles1 str N/A SMILES string of the first molecule smiles2 str N/A SMILES string of the second molecule. Text Input # Used in the run_text function in the Python calling mode.\nName Type Default Description smiles_pair str N/A SMILES strings of the two molecules, separated by a semicolon. Output # The output is the same in both input cases.\nName Type Description similarity str Tanimoto similarity score and similarity description Envs # No required environment variables for this tool.\n","externalUrl":null,"permalink":"/tools/molecule_similarity/","section":"ChemMCP Tools","summary":"\u003cdiv style=\"display: flex; flex-wrap: wrap; gap: 0.75rem; align-items: center;\"\u003e\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Version: 0.1.0\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Last Update: 2025/05/20\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    MCP Support\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Python Calling Support\n  \u003c/span\u003e\n\u003c/span\u003e\n\n\u003c/div\u003e\n\u003cdiv class=\"lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl\"\u003e\n  \u003cstrong\u003eGet the Tanimoto similarity of two molecules. It Can also be used to check if two molecules are identical.\u003c/strong\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong\u003eExample 2\u003c/strong\u003e\u003c/p\u003e","title":"MoleculeSimilarity (cal_molecule_similarity)","type":"tools"},{"content":" Version: 0.1.0 Last Update: 2025/05/20 MCP Support Python Calling Support Calculate molecular weight. Example\nInput:\nsmiles: \u0026#39;CCO\u0026#39; Text Input (used for the run_text function in the Python calling mode):\nsmiles: \u0026#39;CCO\u0026#39; Output:\nweight: 46.041864812 Usage # The tool supports both MCP mode and Python calling mode.\nMCP Mode # Configure your MCP client following its instructions with something like:\n{ \u0026#34;command\u0026#34;: \u0026#34;/ABSTRACT/PATH/TO/uv\u0026#34;, // Use `which uv` to get its path \u0026#34;args\u0026#34;: [\u0026#34;--directory\u0026#34;, \u0026#34;/ABSTRACT/PATH/TO/ChemMCP\u0026#34;, \u0026#34;run\u0026#34;, \u0026#34;--tools\u0026#34;, \u0026#34;MoleculeWeight\u0026#34;], \u0026#34;toolCallTimeoutMillis\u0026#34;: 300000, \u0026#34;env\u0026#34;: {} } Python Calling Mode # import os from chemmcp.tools import MoleculeWeight # Initialize the tool tool = MoleculeWeight() # The tool has two alternative ways to run: # 1. Run with separate input domains (recommended) output = tool.run_code( smiles=\u0026#39;CCO\u0026#39; ) # 2. Run with text-only input output = tool.run_text( smiles=\u0026#39;CCO\u0026#39; ) Each tool in ChemMCP has two ways to run:\nrun_code (recommended): The inputs contain one or more domains, each of which can be a str, an int, a float, etc. run_text: The inputs are a single string in a specific format. The tool will parse the string to extract the input domains. This is useful in scenarios where an agent framework calls tools only with text input. The output is the same in both cases. For the input and output domains, please refer to the tool\u0026rsquo;s signature.\nTool Signature # Input # Used in the MCP mode, as well as the run_code function in the Python calling mode.\nName Type Default Description smiles str N/A SMILES string of the molecule Text Input # Used in the run_text function in the Python calling mode.\nName Type Default Description smiles str N/A SMILES string of the molecule Output # The output is the same in both input cases.\nName Type Description weight float Molecular weight of the molecule Envs # No required environment variables for this tool.\n","externalUrl":null,"permalink":"/tools/molecule_weight/","section":"ChemMCP Tools","summary":"\u003cdiv style=\"display: flex; flex-wrap: wrap; gap: 0.75rem; align-items: center;\"\u003e\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Version: 0.1.0\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Last Update: 2025/05/20\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    MCP Support\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Python Calling Support\n  \u003c/span\u003e\n\u003c/span\u003e\n\n\u003c/div\u003e\n\u003cdiv class=\"lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl\"\u003e\n  \u003cstrong\u003eCalculate molecular weight.\u003c/strong\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong\u003eExample\u003c/strong\u003e\u003c/p\u003e","title":"MoleculeWeight (cal_molecular_weight)","type":"tools"},{"content":" Version: 0.1.0 Last Update: 2025/05/20 MCP Support Python Calling Support Convert chemical name to SMILES string. Example\nInput:\nname: \u0026#39;aspirin\u0026#39; Text Input (used for the run_text function in the Python calling mode):\nname: \u0026#39;aspirin\u0026#39; Output:\nsmiles: \u0026#39;CC(=O)OC1=CC=CC=C1C(=O)O\u0026#39; Usage # The tool supports both MCP mode and Python calling mode.\nMCP Mode # Configure your MCP client following its instructions with something like:\n{ \u0026#34;command\u0026#34;: \u0026#34;/ABSTRACT/PATH/TO/uv\u0026#34;, // Use `which uv` to get its path \u0026#34;args\u0026#34;: [\u0026#34;--directory\u0026#34;, \u0026#34;/ABSTRACT/PATH/TO/ChemMCP\u0026#34;, \u0026#34;run\u0026#34;, \u0026#34;--tools\u0026#34;, \u0026#34;Name2Smiles\u0026#34;], \u0026#34;toolCallTimeoutMillis\u0026#34;: 300000, \u0026#34;env\u0026#34;: {} } Python Calling Mode # import os from chemmcp.tools import Name2Smiles # Initialize the tool tool = Name2Smiles() # The tool has two alternative ways to run: # 1. Run with separate input domains (recommended) output = tool.run_code( name=\u0026#39;aspirin\u0026#39; ) # 2. Run with text-only input output = tool.run_text( name=\u0026#39;aspirin\u0026#39; ) Each tool in ChemMCP has two ways to run:\nrun_code (recommended): The inputs contain one or more domains, each of which can be a str, an int, a float, etc. run_text: The inputs are a single string in a specific format. The tool will parse the string to extract the input domains. This is useful in scenarios where an agent framework calls tools only with text input. The output is the same in both cases. For the input and output domains, please refer to the tool\u0026rsquo;s signature.\nTool Signature # Input # Used in the MCP mode, as well as the run_code function in the Python calling mode.\nName Type Default Description name str N/A Chemical name of the molecule Text Input # Used in the run_text function in the Python calling mode.\nName Type Default Description name str N/A Chemical name of the molecule Output # The output is the same in both input cases.\nName Type Description smiles str SMILES string of the molecule Envs # No required environment variables for this tool.\n","externalUrl":null,"permalink":"/tools/name2smiles/","section":"ChemMCP Tools","summary":"\u003cdiv style=\"display: flex; flex-wrap: wrap; gap: 0.75rem; align-items: center;\"\u003e\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Version: 0.1.0\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Last Update: 2025/05/20\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    MCP Support\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Python Calling Support\n  \u003c/span\u003e\n\u003c/span\u003e\n\n\u003c/div\u003e\n\u003cdiv class=\"lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl\"\u003e\n  \u003cstrong\u003eConvert chemical name to SMILES string.\u003c/strong\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong\u003eExample\u003c/strong\u003e\u003c/p\u003e","title":"Name2Smiles (convert_chemical_name_to_smiles)","type":"tools"},{"content":" Version: 0.1.0 Last Update: 2025/05/20 MCP Support Python Calling Support Get whether a molecule is patented or not. Example\nInput:\nsmiles: \u0026#39;CCO\u0026#39; Text Input (used for the run_text function in the Python calling mode):\nsmiles: \u0026#39;CCO\u0026#39; Output:\npatent_status: \u0026#39;not patented\u0026#39; Usage # The tool supports both MCP mode and Python calling mode.\nMCP Mode # Configure your MCP client following its instructions with something like:\n{ \u0026#34;command\u0026#34;: \u0026#34;/ABSTRACT/PATH/TO/uv\u0026#34;, // Use `which uv` to get its path \u0026#34;args\u0026#34;: [\u0026#34;--directory\u0026#34;, \u0026#34;/ABSTRACT/PATH/TO/ChemMCP\u0026#34;, \u0026#34;run\u0026#34;, \u0026#34;--tools\u0026#34;, \u0026#34;PatentCheck\u0026#34;], \u0026#34;toolCallTimeoutMillis\u0026#34;: 300000, \u0026#34;env\u0026#34;: {} } Python Calling Mode # import os from chemmcp.tools import PatentCheck # Initialize the tool tool = PatentCheck() # The tool has two alternative ways to run: # 1. Run with separate input domains (recommended) output = tool.run_code( smiles=\u0026#39;CCO\u0026#39; ) # 2. Run with text-only input output = tool.run_text( smiles=\u0026#39;CCO\u0026#39; ) Each tool in ChemMCP has two ways to run:\nrun_code (recommended): The inputs contain one or more domains, each of which can be a str, an int, a float, etc. run_text: The inputs are a single string in a specific format. The tool will parse the string to extract the input domains. This is useful in scenarios where an agent framework calls tools only with text input. The output is the same in both cases. For the input and output domains, please refer to the tool\u0026rsquo;s signature.\nTool Signature # Input # Used in the MCP mode, as well as the run_code function in the Python calling mode.\nName Type Default Description smiles str N/A SMILES string of the molecule Text Input # Used in the run_text function in the Python calling mode.\nName Type Default Description smiles str N/A SMILES string of the molecule Output # The output is the same in both input cases.\nName Type Description patent_status str \u0026ldquo;patented\u0026rdquo; or \u0026ldquo;not patented\u0026rdquo; Envs # No required environment variables for this tool.\n","externalUrl":null,"permalink":"/tools/patent_check/","section":"ChemMCP Tools","summary":"\u003cdiv style=\"display: flex; flex-wrap: wrap; gap: 0.75rem; align-items: center;\"\u003e\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Version: 0.1.0\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Last Update: 2025/05/20\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    MCP Support\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Python Calling Support\n  \u003c/span\u003e\n\u003c/span\u003e\n\n\u003c/div\u003e\n\u003cdiv class=\"lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl\"\u003e\n  \u003cstrong\u003eGet whether a molecule is patented or not.\u003c/strong\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong\u003eExample\u003c/strong\u003e\u003c/p\u003e","title":"PatentCheck (check_molecule_if_patented)","type":"tools"},{"content":" Version: 0.1.1 Last Update: 2025/05/24 No MCP Support Python Calling Support Search for molecule/compound information on PubChem, one of the most comprehensive database of chemical molecules and their activities. You can get authoritative information about molecular names, properties, activities, and more. Example 3\nInput:\nrepresentation_name: \u0026#39;Name\u0026#39; representation: \u0026#39;alcohol\u0026#39; Text Input (used for the run_text function in the Python calling mode):\nrepresentation_name_and_representation: \u0026#39;Name: alcohol\u0026#39; Output:\ncompound_doc: \u0026#39;# 1 Names and Identifiers\\nSection Description: Chemical names, synonyms, identifiers, and descriptors.\\n\\n## 1.1 Record Description\\nSection Description: Summary Information\\n\\nEthanol with a small amount of an adulterant added so as to be unfit for use as a beverage. [...]\u0026#39; Usage # The tool supports Python calling mode.\nMCP Mode # This tool does not support MCP mode.\nPython Calling Mode # import os from chemmcp.tools import PubchemSearch # Initialize the tool tool = PubchemSearch() # The tool has two alternative ways to run: # 1. Run with separate input domains (recommended) output = tool.run_code( representation_name=\u0026#39;SMILES\u0026#39; representation=\u0026#39;CCO\u0026#39; ) # 2. Run with text-only input output = tool.run_text( representation_name_and_representation=\u0026#39;SMILES: CCO\u0026#39; ) Each tool in ChemMCP has two ways to run:\nrun_code (recommended): The inputs contain one or more domains, each of which can be a str, an int, a float, etc. run_text: The inputs are a single string in a specific format. The tool will parse the string to extract the input domains. This is useful in scenarios where an agent framework calls tools only with text input. The output is the same in both cases. For the input and output domains, please refer to the tool\u0026rsquo;s signature.\nTool Signature # Input # Used in the MCP mode, as well as the run_code function in the Python calling mode.\nName Type Default Description representation_name str N/A The representation name, can be \u0026ldquo;SMILES\u0026rdquo;, \u0026ldquo;IUPAC\u0026rdquo;, or \u0026ldquo;Name\u0026rdquo; (chemical\u0026rsquo;s common name). representation str N/A The representation of the molecule/compound, corresponding to the representation_name used. Text Input # Used in the run_text function in the Python calling mode.\nName Type Default Description representation_name_and_representation str N/A The representation name and representation of the molecule/compound, e.g., \u0026ldquo;SMILES: \u0026rdquo;, \u0026ldquo;IUPAC: \u0026rdquo;, or \u0026ldquo;Name: \u0026rdquo;. Output # The output is the same in both input cases.\nName Type Description compound_doc str The document of the molecule/compound in a markdown format. Envs # No required environment variables for this tool.\n","externalUrl":null,"permalink":"/tools/pubchem_search/","section":"ChemMCP Tools","summary":"\u003cdiv style=\"display: flex; flex-wrap: wrap; gap: 0.75rem; align-items: center;\"\u003e\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Version: 0.1.1\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Last Update: 2025/05/24\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    No MCP Support\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Python Calling Support\n  \u003c/span\u003e\n\u003c/span\u003e\n\n\u003c/div\u003e\n\u003cdiv class=\"lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl\"\u003e\n  \u003cstrong\u003eSearch for molecule/compound information on PubChem, one of the most comprehensive database of chemical molecules and their activities. You can get authoritative information about molecular names, properties, activities, and more.\u003c/strong\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong\u003eExample 3\u003c/strong\u003e\u003c/p\u003e","title":"PubchemSearch (search_pubchem)","type":"tools"},{"content":" Version: 0.1.1 Last Update: 2025/05/24 MCP Support Python Calling Support Answer questions about molecules/compounds based on the information from PubChem, one of the most comprehensive database of chemical molecules and their activities. You can get authoritative answers about molecular names, properties, activities, and more. Example 3\nInput:\nrepresentation_name: \u0026#39;Name\u0026#39; representation: \u0026#39;alcohol\u0026#39; question: \u0026#39;What properties do this molecule have?\u0026#39; Text Input (used for the run_text function in the Python calling mode):\nrepresentation_name_and_representation_and_question: \u0026#39;Name: alcohol Questions: What properties do this molecule have?\u0026#39; Output:\nanswer: \u0026#39;This molecule has the following properties: [...]\u0026#39; Usage # The tool supports both MCP mode and Python calling mode.\nEnvironment Variables # This tool requires the following environment variables:\nLLM_MODEL_NAME: The name of the LLM to use. See LiteLLM for more details. Other LLM credentials are required to be set in the env field. See LiteLLM for more details. MCP Mode # Configure your MCP client following its instructions with something like:\n{ \u0026#34;command\u0026#34;: \u0026#34;/ABSTRACT/PATH/TO/uv\u0026#34;, // Use `which uv` to get its path \u0026#34;args\u0026#34;: [\u0026#34;--directory\u0026#34;, \u0026#34;/ABSTRACT/PATH/TO/ChemMCP\u0026#34;, \u0026#34;run\u0026#34;, \u0026#34;--tools\u0026#34;, \u0026#34;PubchemSearchQA\u0026#34;], \u0026#34;toolCallTimeoutMillis\u0026#34;: 300000, \u0026#34;env\u0026#34;: { \u0026#34;LLM_MODEL_NAME\u0026#34;: \u0026#34;VALUE_TO_BE_SET\u0026#34; // Add required LLM credentials // ... } } Python Calling Mode # import os from chemmcp.tools import PubchemSearchQA # Set the environment variables os.environ[\u0026#39;LLM_MODEL_NAME\u0026#39;] = \u0026#39;VALUE_TO_BE_SET\u0026#39; # Also add LLM credentials required by the LLM model, such as `OPENAI_API_KEY` # Initialize the tool tool = PubchemSearchQA() # The tool has two alternative ways to run: # 1. Run with separate input domains (recommended) output = tool.run_code( representation_name=\u0026#39;SMILES\u0026#39; representation=\u0026#39;CCO\u0026#39; question=\u0026#39;What properties do this molecule have?\u0026#39; ) # 2. Run with text-only input output = tool.run_text( representation_name_and_representation_and_question=\u0026#39;SMILES: CCO Questions: What properties do this molecule have?\u0026#39; ) Each tool in ChemMCP has two ways to run:\nrun_code (recommended): The inputs contain one or more domains, each of which can be a str, an int, a float, etc. run_text: The inputs are a single string in a specific format. The tool will parse the string to extract the input domains. This is useful in scenarios where an agent framework calls tools only with text input. The output is the same in both cases. For the input and output domains, please refer to the tool\u0026rsquo;s signature.\nTool Signature # Input # Used in the MCP mode, as well as the run_code function in the Python calling mode.\nName Type Default Description representation_name str N/A The representation name, can be \u0026ldquo;smiles\u0026rdquo;, \u0026ldquo;iupac\u0026rdquo;, or \u0026ldquo;name\u0026rdquo; (chemical\u0026rsquo;s common name). representation str N/A The representation of the molecule/compound, corresponding to the representation_name used. question str N/A The question about the molecule/compound. Text Input # Used in the run_text function in the Python calling mode.\nName Type Default Description representation_name_and_representation_and_question str N/A The representation name and representation of the molecule/compound, e.g., \u0026ldquo;SMILES: \u0026rdquo;, \u0026ldquo;IUPAC: \u0026rdquo;, or \u0026ldquo;Name: \u0026rdquo;. Followed by \u0026ldquo;Question: \u0026lt;your question about the molecule/compound\u0026gt;\u0026rdquo;. Output # The output is the same in both input cases.\nName Type Description answer str The answer to the question based on the PubChem page. Envs # Name Description LLM_MODEL_NAME The name of the LLM to use. See LiteLLM for more details. LLM credentials Other LLM credentials are required to be set in the env field. See LiteLLM for more details. ","externalUrl":null,"permalink":"/tools/pubchem_search_qa/","section":"ChemMCP Tools","summary":"\u003cdiv style=\"display: flex; flex-wrap: wrap; gap: 0.75rem; align-items: center;\"\u003e\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Version: 0.1.1\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Last Update: 2025/05/24\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    MCP Support\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Python Calling Support\n  \u003c/span\u003e\n\u003c/span\u003e\n\n\u003c/div\u003e\n\u003cdiv class=\"lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl\"\u003e\n  \u003cstrong\u003eAnswer questions about molecules/compounds based on the information from PubChem, one of the most comprehensive database of chemical molecules and their activities. You can get authoritative answers about molecular names, properties, activities, and more.\u003c/strong\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong\u003eExample 3\u003c/strong\u003e\u003c/p\u003e","title":"PubchemSearchQA (search_pubchem_qa)","type":"tools"},{"content":" Version: 0.1.0 Last Update: 2025/05/20 MCP Support Python Calling Support Conduct single-step retrosynthesis. Given the product(s), predict multiple sets of potential reactants, along with their confidence. Example\nInput:\nproduct_smiles: \u0026#39;CCO\u0026#39; Text Input (used for the run_text function in the Python calling mode):\nproduct_smiles: \u0026#39;CCO\u0026#39; Output:\nreactants_and_confidence: \u0026#39;There are 13 possible sets of reactants for the given product:\\n1.\\tReactants: C1CCOC1.CCNC(=O)c1cccn1C.[Li][AlH4]\\tConfidence: 1.0\\n2.\\tReactants: CCN.CCO.Cn1cccc1C=O.[BH4-].[Na+]\\tConfidence: 1.0\\n3.\\tReactants: CCN.CO.Cn1cccc1C=O.[BH4-].[Na+]\\tConfidence: 1.0\\n4.\\tReactants: CCN.Cn1cccc1C=O.[BH4-].[Na+]\\tConfidence: 1.0\\n5.\\tReactants: CCN.CCO.Cn1cccc1C=O.O.[BH4-].[Na+]\\tConfidence: 1.0\\n6.\\tReactants: CCN.CO.Cn1cccc1C=O.O.[BH4-].[Na+]\\tConfidence: 1.0\\n7.\\tReactants: C1CCOC1.CCN.Cn1cccc1C=O.[BH4-].[Na+]\\tConfidence: 1.0\\n8.\\tReactants: CCN.Cl.Cn1cccc1C=O\\tConfidence: 0.938\\n9.\\tReactants: CCN.Cn1cccc1C=O\\tConfidence: 0.917\\n10.\\tReactants: CCN.Cl.Cn1cccc1C=O\\tConfidence: 0.841\\n11.\\tReactants: C1CCOC1.CCN.Cn1cccc1C=O\\tConfidence: 0.797\\n12.\\tReactants: C1CCOC1.CCN.CO.Cn1cccc1C=O\\tConfidence: 0.647\\n13.\\tReactants: C1CCOC1.CC(=O)NCc1cccn1C.[Li][AlH4]\\tConfidence: 1.0\\n\u0026#39; Usage # The tool supports both MCP mode and Python calling mode.\nEnvironment Variables # This tool requires the following environment variables:\nRXN4CHEM_API_KEY: The API key for IBM RXN4Chem. MCP Mode # Configure your MCP client following its instructions with something like:\n{ \u0026#34;command\u0026#34;: \u0026#34;/ABSTRACT/PATH/TO/uv\u0026#34;, // Use `which uv` to get its path \u0026#34;args\u0026#34;: [\u0026#34;--directory\u0026#34;, \u0026#34;/ABSTRACT/PATH/TO/ChemMCP\u0026#34;, \u0026#34;run\u0026#34;, \u0026#34;--tools\u0026#34;, \u0026#34;Retrosynthesis\u0026#34;], \u0026#34;toolCallTimeoutMillis\u0026#34;: 300000, \u0026#34;env\u0026#34;: { \u0026#34;RXN4CHEM_API_KEY\u0026#34;: \u0026#34;VALUE_TO_BE_SET\u0026#34; } } Python Calling Mode # import os from chemmcp.tools import Retrosynthesis # Set the environment variables os.environ[\u0026#39;RXN4CHEM_API_KEY\u0026#39;] = \u0026#39;VALUE_TO_BE_SET\u0026#39; # Initialize the tool tool = Retrosynthesis() # The tool has two alternative ways to run: # 1. Run with separate input domains (recommended) output = tool.run_code( product_smiles=\u0026#39;CCO\u0026#39; ) # 2. Run with text-only input output = tool.run_text( product_smiles=\u0026#39;CCO\u0026#39; ) Each tool in ChemMCP has two ways to run:\nrun_code (recommended): The inputs contain one or more domains, each of which can be a str, an int, a float, etc. run_text: The inputs are a single string in a specific format. The tool will parse the string to extract the input domains. This is useful in scenarios where an agent framework calls tools only with text input. The output is the same in both cases. For the input and output domains, please refer to the tool\u0026rsquo;s signature.\nTool Signature # Input # Used in the MCP mode, as well as the run_code function in the Python calling mode.\nName Type Default Description product_smiles str N/A The SMILES of the product. Text Input # Used in the run_text function in the Python calling mode.\nName Type Default Description product_smiles str N/A The SMILES of the product. Output # The output is the same in both input cases.\nName Type Description reactants_and_confidence str The SMILES of the reactants and the confidence. Envs # Name Description RXN4CHEM_API_KEY The API key for IBM RXN4Chem. ","externalUrl":null,"permalink":"/tools/retrosynthesis/","section":"ChemMCP Tools","summary":"\u003cdiv style=\"display: flex; flex-wrap: wrap; gap: 0.75rem; align-items: center;\"\u003e\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Version: 0.1.0\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Last Update: 2025/05/20\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    MCP Support\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Python Calling Support\n  \u003c/span\u003e\n\u003c/span\u003e\n\n\u003c/div\u003e\n\u003cdiv class=\"lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl\"\u003e\n  \u003cstrong\u003eConduct single-step retrosynthesis. Given the product(s), predict multiple sets of potential reactants, along with their confidence.\u003c/strong\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong\u003eExample\u003c/strong\u003e\u003c/p\u003e","title":"Retrosynthesis (do_retrosynthesis)","type":"tools"},{"content":" Version: 0.1.0 Last Update: 2025/05/20 MCP Support Python Calling Support Convert SELFIES to SMILES string. Example\nInput:\nselfies: \u0026#39;[C][C][O]\u0026#39; Text Input (used for the run_text function in the Python calling mode):\nselfies: \u0026#39;[C][C][O]\u0026#39; Output:\nsmiles: \u0026#39;CCO\u0026#39; Usage # The tool supports both MCP mode and Python calling mode.\nMCP Mode # Configure your MCP client following its instructions with something like:\n{ \u0026#34;command\u0026#34;: \u0026#34;/ABSTRACT/PATH/TO/uv\u0026#34;, // Use `which uv` to get its path \u0026#34;args\u0026#34;: [\u0026#34;--directory\u0026#34;, \u0026#34;/ABSTRACT/PATH/TO/ChemMCP\u0026#34;, \u0026#34;run\u0026#34;, \u0026#34;--tools\u0026#34;, \u0026#34;Selfies2Smiles\u0026#34;], \u0026#34;toolCallTimeoutMillis\u0026#34;: 300000, \u0026#34;env\u0026#34;: {} } Python Calling Mode # import os from chemmcp.tools import Selfies2Smiles # Initialize the tool tool = Selfies2Smiles() # The tool has two alternative ways to run: # 1. Run with separate input domains (recommended) output = tool.run_code( selfies=\u0026#39;[C][C][O]\u0026#39; ) # 2. Run with text-only input output = tool.run_text( selfies=\u0026#39;[C][C][O]\u0026#39; ) Each tool in ChemMCP has two ways to run:\nrun_code (recommended): The inputs contain one or more domains, each of which can be a str, an int, a float, etc. run_text: The inputs are a single string in a specific format. The tool will parse the string to extract the input domains. This is useful in scenarios where an agent framework calls tools only with text input. The output is the same in both cases. For the input and output domains, please refer to the tool\u0026rsquo;s signature.\nTool Signature # Input # Used in the MCP mode, as well as the run_code function in the Python calling mode.\nName Type Default Description selfies str N/A SELFIES string of the molecule Text Input # Used in the run_text function in the Python calling mode.\nName Type Default Description selfies str N/A SELFIES string of the molecule Output # The output is the same in both input cases.\nName Type Description smiles str SMILES string of the molecule Envs # No required environment variables for this tool.\n","externalUrl":null,"permalink":"/tools/selfies2smiles/","section":"ChemMCP Tools","summary":"\u003cdiv style=\"display: flex; flex-wrap: wrap; gap: 0.75rem; align-items: center;\"\u003e\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Version: 0.1.0\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Last Update: 2025/05/20\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    MCP Support\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Python Calling Support\n  \u003c/span\u003e\n\u003c/span\u003e\n\n\u003c/div\u003e\n\u003cdiv class=\"lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl\"\u003e\n  \u003cstrong\u003eConvert SELFIES to SMILES string.\u003c/strong\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong\u003eExample\u003c/strong\u003e\u003c/p\u003e","title":"Selfies2Smiles (convert_selfies_to_smiles)","type":"tools"},{"content":" Version: 0.1.0 Last Update: 2025/05/20 MCP Support Python Calling Support Predict whether a molecule can cause 20 different side effects, along with the probabilities of each side effect. The side effects are: (1) Blood and lymphatic system disorders; (2) Cardiac disorders; (3) Congenital, familial and genetic disorders; (4) Ear and labyrinth disorders; (5) Endocrine disorders; (6) Eye disorders; (7) Gastrointestinal disorders; (8) Hepatobiliary disorders; (9) Immune system disorders; (10) Metabolism and nutrition disorders; (11) Musculoskeletal and connective tissue disorders; (12) Neoplasms benign, malignant and unspecified (incl cysts and polyps); (13) Nervous system disorders; (14) Pregnancy, puerperium and perinatal conditions; (15) Psychiatric disorders; (16) Renal and urinary disorders; (17) Reproductive system and breast disorders; (18) Respiratory, thoracic and mediastinal disorders; (19) Skin and subcutaneous tissue disorders; (20) Vascular disorders. Example\nInput:\nsmiles: \u0026#39;CC1=CC(C)=C(NC(=O)CN(CC(=O)O)CC(=O)O)C(C)=C1Br\u0026#39; Text Input (used for the run_text function in the Python calling mode):\nsmiles: \u0026#39;CC1=CC(C)=C(NC(=O)CN(CC(=O)O)CC(=O)O)C(C)=C1Br\u0026#39; Output:\nside_effect: \u0026#34;The probabilities of the compound to cause different side effects are as follows:Blood and lymphatic system disorders: 11.29%, which means it\u0026#39;s unlikely to cause the side effect.\\nCardiac disorders: 10.92%, which means it\u0026#39;s unlikely to cause the side effect.\\nCongenital, familial and genetic disorders: 11.98%, which means it\u0026#39;s unlikely to cause the side effect.\\nEar and labyrinth disorders: 8.48%, which means it\u0026#39;s unlikely to cause the side effect.\\nEndocrine disorders: 4.16%, which means it\u0026#39;s unlikely to cause the side effect.\\nEye disorders: 15.19%, which means it\u0026#39;s unlikely to cause the side effect.\\nGastrointestinal disorders: 57.00%, which means it\u0026#39;s likely to cause the side effect.\\nHepatobiliary disorders: 9.62%, which means it\u0026#39;s unlikely to cause the side effect.\\nImmune system disorders: 10.14%, which means it\u0026#39;s unlikely to cause the side effect.\\nMetabolism and nutrition disorders: 15.41%, which means it\u0026#39;s unlikely to cause the side effect.\\nMusculoskeletal and connective tissue disorders: 10.77%, which means it\u0026#39;s unlikely to cause the side effect.\\nNeoplasms benign, malignant and unspecified (incl cysts and polyps): 4.92%, which means it\u0026#39;s unlikely to cause the side effect.\\nNervous system disorders: 34.37%, which means it\u0026#39;s unlikely to cause the side effect.\\nPregnancy, puerperium and perinatal conditions: 3.32%, which means it\u0026#39;s unlikely to cause the side effect.\\nPsychiatric disorders: 8.06%, which means it\u0026#39;s unlikely to cause the side effect.\\nRenal and urinary disorders: 10.64%, which means it\u0026#39;s unlikely to cause the side effect.\\nReproductive system and breast disorders: 4.59%, which means it\u0026#39;s unlikely to cause the side effect.\\nRespiratory, thoracic and mediastinal disorders: 16.48%, which means it\u0026#39;s unlikely to cause the side effect.\\nSkin and subcutaneous tissue disorders: 53.97%, which means it\u0026#39;s likely to cause the side effect.\\nVascular disorders: 18.45%, which means it\u0026#39;s unlikely to cause the side effect.\\nNote that the results are predicted by a neural network model and may not be accurate. You may use other tools or resources to obtain more reliable results if needed.\u0026#34; Usage # The tool supports both MCP mode and Python calling mode.\nMCP Mode # Configure your MCP client following its instructions with something like:\n{ \u0026#34;command\u0026#34;: \u0026#34;/ABSTRACT/PATH/TO/uv\u0026#34;, // Use `which uv` to get its path \u0026#34;args\u0026#34;: [\u0026#34;--directory\u0026#34;, \u0026#34;/ABSTRACT/PATH/TO/ChemMCP\u0026#34;, \u0026#34;run\u0026#34;, \u0026#34;--tools\u0026#34;, \u0026#34;SideEffectPredictor\u0026#34;], \u0026#34;toolCallTimeoutMillis\u0026#34;: 300000, \u0026#34;env\u0026#34;: {} } Python Calling Mode # import os from chemmcp.tools import SideEffectPredictor # Initialize the tool tool = SideEffectPredictor() # The tool has two alternative ways to run: # 1. Run with separate input domains (recommended) output = tool.run_code( smiles=\u0026#39;CC1=CC(C)=C(NC(=O)CN(CC(=O)O)CC(=O)O)C(C)=C1Br\u0026#39; ) # 2. Run with text-only input output = tool.run_text( smiles=\u0026#39;CC1=CC(C)=C(NC(=O)CN(CC(=O)O)CC(=O)O)C(C)=C1Br\u0026#39; ) Each tool in ChemMCP has two ways to run:\nrun_code (recommended): The inputs contain one or more domains, each of which can be a str, an int, a float, etc. run_text: The inputs are a single string in a specific format. The tool will parse the string to extract the input domains. This is useful in scenarios where an agent framework calls tools only with text input. The output is the same in both cases. For the input and output domains, please refer to the tool\u0026rsquo;s signature.\nTool Signature # Input # Used in the MCP mode, as well as the run_code function in the Python calling mode.\nName Type Default Description smiles str N/A SMILES string of the molecule. Text Input # Used in the run_text function in the Python calling mode.\nName Type Default Description smiles str N/A SMILES string of the molecule. Output # The output is the same in both input cases.\nName Type Description side_effect str The probabilities of the compound to cause different side effects. Envs # No required environment variables for this tool.\n","externalUrl":null,"permalink":"/tools/side_effect_predictor/","section":"ChemMCP Tools","summary":"\u003cdiv style=\"display: flex; flex-wrap: wrap; gap: 0.75rem; align-items: center;\"\u003e\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Version: 0.1.0\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Last Update: 2025/05/20\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    MCP Support\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Python Calling Support\n  \u003c/span\u003e\n\u003c/span\u003e\n\n\u003c/div\u003e\n\u003cdiv class=\"lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl\"\u003e\n  \u003cstrong\u003ePredict whether a molecule can cause 20 different side effects, along with the probabilities of each side effect. The side effects are: (1) Blood and lymphatic system disorders; (2) Cardiac disorders; (3) Congenital, familial and genetic disorders; (4) Ear and labyrinth disorders; (5) Endocrine disorders; (6) Eye disorders; (7) Gastrointestinal disorders; (8) Hepatobiliary disorders; (9) Immune system disorders; (10) Metabolism and nutrition disorders; (11) Musculoskeletal and connective tissue disorders; (12) Neoplasms benign, malignant and unspecified (incl cysts and polyps); (13) Nervous system disorders; (14) Pregnancy, puerperium and perinatal conditions; (15) Psychiatric disorders; (16) Renal and urinary disorders; (17) Reproductive system and breast disorders; (18) Respiratory, thoracic and mediastinal disorders; (19) Skin and subcutaneous tissue disorders; (20) Vascular disorders.\u003c/strong\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong\u003eExample\u003c/strong\u003e\u003c/p\u003e","title":"SideEffectPredictor (predict_side_effect)","type":"tools"},{"content":" Version: 0.1.0 Last Update: 2025/05/24 MCP Support Python Calling Support Check the syntactical validity of a reaction SMART string ([reactant SMILES]\u0026gt;[reagent SMILES]\u0026gt;[product SMILES]). Example\nInput:\nsmarts: \u0026#39;B.C1=CCCCC1.C1=CCCCC1\u0026gt;\u0026gt;B(C1CCCCC1)C1CCCCC1\u0026#39; Text Input (used for the run_text function in the Python calling mode):\nsmarts: \u0026#39;B.C1=CCCCC1.C1=CCCCC1\u0026gt;\u0026gt;B(C1CCCCC1)C1CCCCC1\u0026#39; Output:\nresult: \u0026#39;The reaction SMILES string is valid.\u0026#39; Usage # The tool supports both MCP mode and Python calling mode.\nMCP Mode # Configure your MCP client following its instructions with something like:\n{ \u0026#34;command\u0026#34;: \u0026#34;/ABSTRACT/PATH/TO/uv\u0026#34;, // Use `which uv` to get its path \u0026#34;args\u0026#34;: [\u0026#34;--directory\u0026#34;, \u0026#34;/ABSTRACT/PATH/TO/ChemMCP\u0026#34;, \u0026#34;run\u0026#34;, \u0026#34;--tools\u0026#34;, \u0026#34;SmartsCheck\u0026#34;], \u0026#34;toolCallTimeoutMillis\u0026#34;: 300000, \u0026#34;env\u0026#34;: {} } Python Calling Mode # import os from chemmcp.tools import SmartsCheck # Initialize the tool tool = SmartsCheck() # The tool has two alternative ways to run: # 1. Run with separate input domains (recommended) output = tool.run_code( smarts=\u0026#39;B.C1=CCCCC1.C1=CCCCC1\u0026gt;\u0026gt;B(C1CCCCC1)C1CCCCC1\u0026#39; ) # 2. Run with text-only input output = tool.run_text( smarts=\u0026#39;B.C1=CCCCC1.C1=CCCCC1\u0026gt;\u0026gt;B(C1CCCCC1)C1CCCCC1\u0026#39; ) Each tool in ChemMCP has two ways to run:\nrun_code (recommended): The inputs contain one or more domains, each of which can be a str, an int, a float, etc. run_text: The inputs are a single string in a specific format. The tool will parse the string to extract the input domains. This is useful in scenarios where an agent framework calls tools only with text input. The output is the same in both cases. For the input and output domains, please refer to the tool\u0026rsquo;s signature.\nTool Signature # Input # Used in the MCP mode, as well as the run_code function in the Python calling mode.\nName Type Default Description smarts str N/A The SMARTS string of a chemical reaction to check. Text Input # Used in the run_text function in the Python calling mode.\nName Type Default Description smarts str N/A The SMARTS string of a chemical reaction to check. Output # The output is the same in both input cases.\nName Type Description result str Description of the validity of the SMARTS string. Envs # No required environment variables for this tool.\n","externalUrl":null,"permalink":"/tools/smarts_check/","section":"ChemMCP Tools","summary":"\u003cdiv style=\"display: flex; flex-wrap: wrap; gap: 0.75rem; align-items: center;\"\u003e\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Version: 0.1.0\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Last Update: 2025/05/24\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    MCP Support\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Python Calling Support\n  \u003c/span\u003e\n\u003c/span\u003e\n\n\u003c/div\u003e\n\u003cdiv class=\"lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl\"\u003e\n  \u003cstrong\u003eCheck the syntactical validity of a reaction SMART string ([reactant SMILES]\u0026gt;[reagent SMILES]\u0026gt;[product SMILES]).\u003c/strong\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong\u003eExample\u003c/strong\u003e\u003c/p\u003e","title":"SmartsCheck (check_smarts)","type":"tools"},{"content":" Version: 0.1.0 Last Update: 2025/05/24 MCP Support Python Calling Support Convert SMILES to CAS number based on PubChem. Example\nInput:\nsmiles: \u0026#39;CCO\u0026#39; Text Input (used for the run_text function in the Python calling mode):\nsmiles: \u0026#39;CCO\u0026#39; Output:\ncas: \u0026#39;64-17-5\u0026#39; Usage # The tool supports both MCP mode and Python calling mode.\nMCP Mode # Configure your MCP client following its instructions with something like:\n{ \u0026#34;command\u0026#34;: \u0026#34;/ABSTRACT/PATH/TO/uv\u0026#34;, // Use `which uv` to get its path \u0026#34;args\u0026#34;: [\u0026#34;--directory\u0026#34;, \u0026#34;/ABSTRACT/PATH/TO/ChemMCP\u0026#34;, \u0026#34;run\u0026#34;, \u0026#34;--tools\u0026#34;, \u0026#34;Smiles2Cas\u0026#34;], \u0026#34;toolCallTimeoutMillis\u0026#34;: 300000, \u0026#34;env\u0026#34;: {} } Python Calling Mode # import os from chemmcp.tools import Smiles2Cas # Initialize the tool tool = Smiles2Cas() # The tool has two alternative ways to run: # 1. Run with separate input domains (recommended) output = tool.run_code( smiles=\u0026#39;CCO\u0026#39; ) # 2. Run with text-only input output = tool.run_text( smiles=\u0026#39;CCO\u0026#39; ) Each tool in ChemMCP has two ways to run:\nrun_code (recommended): The inputs contain one or more domains, each of which can be a str, an int, a float, etc. run_text: The inputs are a single string in a specific format. The tool will parse the string to extract the input domains. This is useful in scenarios where an agent framework calls tools only with text input. The output is the same in both cases. For the input and output domains, please refer to the tool\u0026rsquo;s signature.\nTool Signature # Input # Used in the MCP mode, as well as the run_code function in the Python calling mode.\nName Type Default Description smiles str N/A SMILES string of the molecule Text Input # Used in the run_text function in the Python calling mode.\nName Type Default Description smiles str N/A SMILES string of the molecule Output # The output is the same in both input cases.\nName Type Description cas str CAS number of the molecule Envs # No required environment variables for this tool.\n","externalUrl":null,"permalink":"/tools/smiles2cas/","section":"ChemMCP Tools","summary":"\u003cdiv style=\"display: flex; flex-wrap: wrap; gap: 0.75rem; align-items: center;\"\u003e\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Version: 0.1.0\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Last Update: 2025/05/24\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    MCP Support\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Python Calling Support\n  \u003c/span\u003e\n\u003c/span\u003e\n\n\u003c/div\u003e\n\u003cdiv class=\"lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl\"\u003e\n  \u003cstrong\u003eConvert SMILES to CAS number based on PubChem.\u003c/strong\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong\u003eExample\u003c/strong\u003e\u003c/p\u003e","title":"Smiles2Cas (convert_smiles_to_cas)","type":"tools"},{"content":" Version: 0.1.0 Last Update: 2025/05/20 MCP Support Python Calling Support Convert SMILES to molecular formula. Example\nInput:\nsmiles: \u0026#39;CCO\u0026#39; Text Input (used for the run_text function in the Python calling mode):\nsmiles: \u0026#39;CCO\u0026#39; Output:\nformula: \u0026#39;C2H6O\u0026#39; Usage # The tool supports both MCP mode and Python calling mode.\nMCP Mode # Configure your MCP client following its instructions with something like:\n{ \u0026#34;command\u0026#34;: \u0026#34;/ABSTRACT/PATH/TO/uv\u0026#34;, // Use `which uv` to get its path \u0026#34;args\u0026#34;: [\u0026#34;--directory\u0026#34;, \u0026#34;/ABSTRACT/PATH/TO/ChemMCP\u0026#34;, \u0026#34;run\u0026#34;, \u0026#34;--tools\u0026#34;, \u0026#34;Smiles2Formula\u0026#34;], \u0026#34;toolCallTimeoutMillis\u0026#34;: 300000, \u0026#34;env\u0026#34;: {} } Python Calling Mode # import os from chemmcp.tools import Smiles2Formula # Initialize the tool tool = Smiles2Formula() # The tool has two alternative ways to run: # 1. Run with separate input domains (recommended) output = tool.run_code( smiles=\u0026#39;CCO\u0026#39; ) # 2. Run with text-only input output = tool.run_text( smiles=\u0026#39;CCO\u0026#39; ) Each tool in ChemMCP has two ways to run:\nrun_code (recommended): The inputs contain one or more domains, each of which can be a str, an int, a float, etc. run_text: The inputs are a single string in a specific format. The tool will parse the string to extract the input domains. This is useful in scenarios where an agent framework calls tools only with text input. The output is the same in both cases. For the input and output domains, please refer to the tool\u0026rsquo;s signature.\nTool Signature # Input # Used in the MCP mode, as well as the run_code function in the Python calling mode.\nName Type Default Description smiles str N/A SMILES string of the molecule Text Input # Used in the run_text function in the Python calling mode.\nName Type Default Description smiles str N/A SMILES string of the molecule Output # The output is the same in both input cases.\nName Type Description formula str Molecular formula of the molecule Envs # No required environment variables for this tool.\n","externalUrl":null,"permalink":"/tools/smiles2formula/","section":"ChemMCP Tools","summary":"\u003cdiv style=\"display: flex; flex-wrap: wrap; gap: 0.75rem; align-items: center;\"\u003e\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Version: 0.1.0\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Last Update: 2025/05/20\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    MCP Support\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Python Calling Support\n  \u003c/span\u003e\n\u003c/span\u003e\n\n\u003c/div\u003e\n\u003cdiv class=\"lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl\"\u003e\n  \u003cstrong\u003eConvert SMILES to molecular formula.\u003c/strong\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong\u003eExample\u003c/strong\u003e\u003c/p\u003e","title":"Smiles2Formula (convert_smiles_to_formula)","type":"tools"},{"content":" Version: 0.1.0 Last Update: 2025/05/20 MCP Support Python Calling Support Convert SMILES to IUPAC name. Example\nInput:\nsmiles: \u0026#39;CCO\u0026#39; Text Input (used for the run_text function in the Python calling mode):\nsmiles: \u0026#39;CCO\u0026#39; Output:\niupac: \u0026#39;ethanol\u0026#39; Usage # The tool supports both MCP mode and Python calling mode.\nMCP Mode # Configure your MCP client following its instructions with something like:\n{ \u0026#34;command\u0026#34;: \u0026#34;/ABSTRACT/PATH/TO/uv\u0026#34;, // Use `which uv` to get its path \u0026#34;args\u0026#34;: [\u0026#34;--directory\u0026#34;, \u0026#34;/ABSTRACT/PATH/TO/ChemMCP\u0026#34;, \u0026#34;run\u0026#34;, \u0026#34;--tools\u0026#34;, \u0026#34;Smiles2Iupac\u0026#34;], \u0026#34;toolCallTimeoutMillis\u0026#34;: 300000, \u0026#34;env\u0026#34;: {} } Python Calling Mode # import os from chemmcp.tools import Smiles2Iupac # Initialize the tool tool = Smiles2Iupac() # The tool has two alternative ways to run: # 1. Run with separate input domains (recommended) output = tool.run_code( smiles=\u0026#39;CCO\u0026#39; ) # 2. Run with text-only input output = tool.run_text( smiles=\u0026#39;CCO\u0026#39; ) Each tool in ChemMCP has two ways to run:\nrun_code (recommended): The inputs contain one or more domains, each of which can be a str, an int, a float, etc. run_text: The inputs are a single string in a specific format. The tool will parse the string to extract the input domains. This is useful in scenarios where an agent framework calls tools only with text input. The output is the same in both cases. For the input and output domains, please refer to the tool\u0026rsquo;s signature.\nTool Signature # Input # Used in the MCP mode, as well as the run_code function in the Python calling mode.\nName Type Default Description smiles str N/A SMILES string of the molecule Text Input # Used in the run_text function in the Python calling mode.\nName Type Default Description smiles str N/A SMILES string of the molecule Output # The output is the same in both input cases.\nName Type Description iupac str IUPAC name of the molecule Envs # No required environment variables for this tool.\n","externalUrl":null,"permalink":"/tools/smiles2iupac/","section":"ChemMCP Tools","summary":"\u003cdiv style=\"display: flex; flex-wrap: wrap; gap: 0.75rem; align-items: center;\"\u003e\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Version: 0.1.0\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Last Update: 2025/05/20\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    MCP Support\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Python Calling Support\n  \u003c/span\u003e\n\u003c/span\u003e\n\n\u003c/div\u003e\n\u003cdiv class=\"lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl\"\u003e\n  \u003cstrong\u003eConvert SMILES to IUPAC name.\u003c/strong\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong\u003eExample\u003c/strong\u003e\u003c/p\u003e","title":"Smiles2Iupac (convert_smiles_to_iupac)","type":"tools"},{"content":" Version: 0.1.0 Last Update: 2025/05/20 MCP Support Python Calling Support Convert SMILES to SELFIES string. Example\nInput:\nsmiles: \u0026#39;CCO\u0026#39; Text Input (used for the run_text function in the Python calling mode):\nsmiles: \u0026#39;CCO\u0026#39; Output:\nselfies: \u0026#39;[C][C][O]\u0026#39; Usage # The tool supports both MCP mode and Python calling mode.\nMCP Mode # Configure your MCP client following its instructions with something like:\n{ \u0026#34;command\u0026#34;: \u0026#34;/ABSTRACT/PATH/TO/uv\u0026#34;, // Use `which uv` to get its path \u0026#34;args\u0026#34;: [\u0026#34;--directory\u0026#34;, \u0026#34;/ABSTRACT/PATH/TO/ChemMCP\u0026#34;, \u0026#34;run\u0026#34;, \u0026#34;--tools\u0026#34;, \u0026#34;Smiles2Selfies\u0026#34;], \u0026#34;toolCallTimeoutMillis\u0026#34;: 300000, \u0026#34;env\u0026#34;: {} } Python Calling Mode # import os from chemmcp.tools import Smiles2Selfies # Initialize the tool tool = Smiles2Selfies() # The tool has two alternative ways to run: # 1. Run with separate input domains (recommended) output = tool.run_code( smiles=\u0026#39;CCO\u0026#39; ) # 2. Run with text-only input output = tool.run_text( smiles=\u0026#39;CCO\u0026#39; ) Each tool in ChemMCP has two ways to run:\nrun_code (recommended): The inputs contain one or more domains, each of which can be a str, an int, a float, etc. run_text: The inputs are a single string in a specific format. The tool will parse the string to extract the input domains. This is useful in scenarios where an agent framework calls tools only with text input. The output is the same in both cases. For the input and output domains, please refer to the tool\u0026rsquo;s signature.\nTool Signature # Input # Used in the MCP mode, as well as the run_code function in the Python calling mode.\nName Type Default Description smiles str N/A SMILES string of the molecule Text Input # Used in the run_text function in the Python calling mode.\nName Type Default Description smiles str N/A SMILES string of the molecule Output # The output is the same in both input cases.\nName Type Description selfies str SELFIES string of the molecule Envs # No required environment variables for this tool.\n","externalUrl":null,"permalink":"/tools/smiles2selfies/","section":"ChemMCP Tools","summary":"\u003cdiv style=\"display: flex; flex-wrap: wrap; gap: 0.75rem; align-items: center;\"\u003e\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Version: 0.1.0\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Last Update: 2025/05/20\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    MCP Support\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Python Calling Support\n  \u003c/span\u003e\n\u003c/span\u003e\n\n\u003c/div\u003e\n\u003cdiv class=\"lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl\"\u003e\n  \u003cstrong\u003eConvert SMILES to SELFIES string.\u003c/strong\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong\u003eExample\u003c/strong\u003e\u003c/p\u003e","title":"Smiles2Selfies (convert_smiles_to_selfies)","type":"tools"},{"content":" Version: 0.1.0 Last Update: 2025/05/20 MCP Support Python Calling Support Canonicalize a molecular SMILES string. Example\nInput:\nsmiles: \u0026#39;C(O)C\u0026#39; isomeric: True kekulization: True keep_atom_map: False Text Input (used for the run_text function in the Python calling mode):\nsmiles: \u0026#39;C(O)C\u0026#39; Output:\ncanonical_smiles: \u0026#39;CCO\u0026#39; Usage # The tool supports both MCP mode and Python calling mode.\nMCP Mode # Configure your MCP client following its instructions with something like:\n{ \u0026#34;command\u0026#34;: \u0026#34;/ABSTRACT/PATH/TO/uv\u0026#34;, // Use `which uv` to get its path \u0026#34;args\u0026#34;: [\u0026#34;--directory\u0026#34;, \u0026#34;/ABSTRACT/PATH/TO/ChemMCP\u0026#34;, \u0026#34;run\u0026#34;, \u0026#34;--tools\u0026#34;, \u0026#34;SmilesCanonicalization\u0026#34;], \u0026#34;toolCallTimeoutMillis\u0026#34;: 300000, \u0026#34;env\u0026#34;: {} } Python Calling Mode # import os from chemmcp.tools import SmilesCanonicalization # Initialize the tool tool = SmilesCanonicalization() # The tool has two alternative ways to run: # 1. Run with separate input domains (recommended) output = tool.run_code( smiles=\u0026#39;C(O)C\u0026#39; isomeric=True kekulization=True keep_atom_map=False ) # 2. Run with text-only input output = tool.run_text( smiles=\u0026#39;C(O)C\u0026#39; ) Each tool in ChemMCP has two ways to run:\nrun_code (recommended): The inputs contain one or more domains, each of which can be a str, an int, a float, etc. run_text: The inputs are a single string in a specific format. The tool will parse the string to extract the input domains. This is useful in scenarios where an agent framework calls tools only with text input. The output is the same in both cases. For the input and output domains, please refer to the tool\u0026rsquo;s signature.\nTool Signature # Input # Used in the MCP mode, as well as the run_code function in the Python calling mode.\nName Type Default Description smiles str N/A SMILES string of the molecule. isomeric bool N/A Whether to include isomeric information. Default is True. kekulization bool N/A Whether to perform kekulization. Default is True. keep_atom_map bool N/A Whether to keep atom mapping numbers, if any. Default is True. Text Input # Used in the run_text function in the Python calling mode.\nName Type Default Description smiles str N/A SMILES string of the molecule. Output # The output is the same in both input cases.\nName Type Description canonical_smiles str Canonicalized SMILES string. Envs # No required environment variables for this tool.\n","externalUrl":null,"permalink":"/tools/smiles_canonicalization/","section":"ChemMCP Tools","summary":"\u003cdiv style=\"display: flex; flex-wrap: wrap; gap: 0.75rem; align-items: center;\"\u003e\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Version: 0.1.0\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Last Update: 2025/05/20\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    MCP Support\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Python Calling Support\n  \u003c/span\u003e\n\u003c/span\u003e\n\n\u003c/div\u003e\n\u003cdiv class=\"lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl\"\u003e\n  \u003cstrong\u003eCanonicalize a molecular SMILES string.\u003c/strong\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong\u003eExample\u003c/strong\u003e\u003c/p\u003e","title":"SmilesCanonicalization (canonicalize_smiles)","type":"tools"},{"content":" Version: 0.1.0 Last Update: 2025/05/24 MCP Support Python Calling Support Check the syntactical validity of a molecular SMILES string. Example\nInput:\nsmiles: \u0026#39;CCO\u0026#39; Text Input (used for the run_text function in the Python calling mode):\nsmiles: \u0026#39;CCO\u0026#39; Output:\nresult: \u0026#39;The SMILES string is valid.\u0026#39; Usage # The tool supports both MCP mode and Python calling mode.\nMCP Mode # Configure your MCP client following its instructions with something like:\n{ \u0026#34;command\u0026#34;: \u0026#34;/ABSTRACT/PATH/TO/uv\u0026#34;, // Use `which uv` to get its path \u0026#34;args\u0026#34;: [\u0026#34;--directory\u0026#34;, \u0026#34;/ABSTRACT/PATH/TO/ChemMCP\u0026#34;, \u0026#34;run\u0026#34;, \u0026#34;--tools\u0026#34;, \u0026#34;SmilesCheck\u0026#34;], \u0026#34;toolCallTimeoutMillis\u0026#34;: 300000, \u0026#34;env\u0026#34;: {} } Python Calling Mode # import os from chemmcp.tools import SmilesCheck # Initialize the tool tool = SmilesCheck() # The tool has two alternative ways to run: # 1. Run with separate input domains (recommended) output = tool.run_code( smiles=\u0026#39;CCO\u0026#39; ) # 2. Run with text-only input output = tool.run_text( smiles=\u0026#39;CCO\u0026#39; ) Each tool in ChemMCP has two ways to run:\nrun_code (recommended): The inputs contain one or more domains, each of which can be a str, an int, a float, etc. run_text: The inputs are a single string in a specific format. The tool will parse the string to extract the input domains. This is useful in scenarios where an agent framework calls tools only with text input. The output is the same in both cases. For the input and output domains, please refer to the tool\u0026rsquo;s signature.\nTool Signature # Input # Used in the MCP mode, as well as the run_code function in the Python calling mode.\nName Type Default Description smiles str N/A The SMILES string to check. Text Input # Used in the run_text function in the Python calling mode.\nName Type Default Description smiles str N/A The SMILES string to check. Output # The output is the same in both input cases.\nName Type Description result str Description of the validity of the SMILES string. Envs # No required environment variables for this tool.\n","externalUrl":null,"permalink":"/tools/smiles_check/","section":"ChemMCP Tools","summary":"\u003cdiv style=\"display: flex; flex-wrap: wrap; gap: 0.75rem; align-items: center;\"\u003e\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Version: 0.1.0\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Last Update: 2025/05/24\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    MCP Support\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Python Calling Support\n  \u003c/span\u003e\n\u003c/span\u003e\n\n\u003c/div\u003e\n\u003cdiv class=\"lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl\"\u003e\n  \u003cstrong\u003eCheck the syntactical validity of a molecular SMILES string.\u003c/strong\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong\u003eExample\u003c/strong\u003e\u003c/p\u003e","title":"SmilesCheck (check_smiles)","type":"tools"},{"content":" Version: 0.1.0 Last Update: 2025/05/20 MCP Support Python Calling Support Predict the solubility of a molecule given its SMILES representation. Example\nInput:\nsmiles: \u0026#39;CC(C)Cl\u0026#39; Text Input (used for the run_text function in the Python calling mode):\nsmiles: \u0026#39;CC(C)Cl\u0026#39; Output:\nsolubility: \u0026#39;The log solubility in mol/L is -1.410.\\nNote that the result is predicted by a neural network model and may not be accurate. You may use other tools or resources to obtain more reliable results if needed.\u0026#39; Usage # The tool supports both MCP mode and Python calling mode.\nMCP Mode # Configure your MCP client following its instructions with something like:\n{ \u0026#34;command\u0026#34;: \u0026#34;/ABSTRACT/PATH/TO/uv\u0026#34;, // Use `which uv` to get its path \u0026#34;args\u0026#34;: [\u0026#34;--directory\u0026#34;, \u0026#34;/ABSTRACT/PATH/TO/ChemMCP\u0026#34;, \u0026#34;run\u0026#34;, \u0026#34;--tools\u0026#34;, \u0026#34;SolubilityPredictor\u0026#34;], \u0026#34;toolCallTimeoutMillis\u0026#34;: 300000, \u0026#34;env\u0026#34;: {} } Python Calling Mode # import os from chemmcp.tools import SolubilityPredictor # Initialize the tool tool = SolubilityPredictor() # The tool has two alternative ways to run: # 1. Run with separate input domains (recommended) output = tool.run_code( smiles=\u0026#39;CC(C)Cl\u0026#39; ) # 2. Run with text-only input output = tool.run_text( smiles=\u0026#39;CC(C)Cl\u0026#39; ) Each tool in ChemMCP has two ways to run:\nrun_code (recommended): The inputs contain one or more domains, each of which can be a str, an int, a float, etc. run_text: The inputs are a single string in a specific format. The tool will parse the string to extract the input domains. This is useful in scenarios where an agent framework calls tools only with text input. The output is the same in both cases. For the input and output domains, please refer to the tool\u0026rsquo;s signature.\nTool Signature # Input # Used in the MCP mode, as well as the run_code function in the Python calling mode.\nName Type Default Description smiles str N/A SMILES string of the molecule. Text Input # Used in the run_text function in the Python calling mode.\nName Type Default Description smiles str N/A SMILES string of the molecule. Output # The output is the same in both input cases.\nName Type Description solubility float Log solubility in mol/L. Envs # No required environment variables for this tool.\n","externalUrl":null,"permalink":"/tools/solubility_predictor/","section":"ChemMCP Tools","summary":"\u003cdiv style=\"display: flex; flex-wrap: wrap; gap: 0.75rem; align-items: center;\"\u003e\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Version: 0.1.0\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Last Update: 2025/05/20\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    MCP Support\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Python Calling Support\n  \u003c/span\u003e\n\u003c/span\u003e\n\n\u003c/div\u003e\n\u003cdiv class=\"lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl\"\u003e\n  \u003cstrong\u003ePredict the solubility of a molecule given its SMILES representation.\u003c/strong\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong\u003eExample\u003c/strong\u003e\u003c/p\u003e","title":"SolubilityPredictor (predict_solubility)","type":"tools"},{"content":" Version: 0.1.0 Last Update: 2025/05/20 MCP Support Python Calling Support Predict the toxicity of a molecule given its SMILES representation. Example\nInput:\nsmiles: \u0026#39;COC[C@@H](NC(C)=O)C(=O)NCC1=CC=CC=C1\u0026#39; Text Input (used for the run_text function in the Python calling mode):\nsmiles: \u0026#39;COC[C@@H](NC(C)=O)C(=O)NCC1=CC=CC=C1\u0026#39; Output:\ntoxicity: \u0026#34;The probability of the compound to be toxic is 6.04%, which means it\u0026#39;s unlikely to happen.\\nNote that the result is predicted by a neural network model and may not be accurate. You may use other tools or resources to obtain more reliable results if needed.\u0026#34; Usage # The tool supports both MCP mode and Python calling mode.\nMCP Mode # Configure your MCP client following its instructions with something like:\n{ \u0026#34;command\u0026#34;: \u0026#34;/ABSTRACT/PATH/TO/uv\u0026#34;, // Use `which uv` to get its path \u0026#34;args\u0026#34;: [\u0026#34;--directory\u0026#34;, \u0026#34;/ABSTRACT/PATH/TO/ChemMCP\u0026#34;, \u0026#34;run\u0026#34;, \u0026#34;--tools\u0026#34;, \u0026#34;ToxicityPredictor\u0026#34;], \u0026#34;toolCallTimeoutMillis\u0026#34;: 300000, \u0026#34;env\u0026#34;: {} } Python Calling Mode # import os from chemmcp.tools import ToxicityPredictor # Initialize the tool tool = ToxicityPredictor() # The tool has two alternative ways to run: # 1. Run with separate input domains (recommended) output = tool.run_code( smiles=\u0026#39;COC[C@@H](NC(C)=O)C(=O)NCC1=CC=CC=C1\u0026#39; ) # 2. Run with text-only input output = tool.run_text( smiles=\u0026#39;COC[C@@H](NC(C)=O)C(=O)NCC1=CC=CC=C1\u0026#39; ) Each tool in ChemMCP has two ways to run:\nrun_code (recommended): The inputs contain one or more domains, each of which can be a str, an int, a float, etc. run_text: The inputs are a single string in a specific format. The tool will parse the string to extract the input domains. This is useful in scenarios where an agent framework calls tools only with text input. The output is the same in both cases. For the input and output domains, please refer to the tool\u0026rsquo;s signature.\nTool Signature # Input # Used in the MCP mode, as well as the run_code function in the Python calling mode.\nName Type Default Description smiles str N/A SMILES string of the molecule. Text Input # Used in the run_text function in the Python calling mode.\nName Type Default Description smiles str N/A SMILES string of the molecule. Output # The output is the same in both input cases.\nName Type Description toxicity str The probability of the compound to be toxic. Envs # No required environment variables for this tool.\n","externalUrl":null,"permalink":"/tools/toxicity_predictor/","section":"ChemMCP Tools","summary":"\u003cdiv style=\"display: flex; flex-wrap: wrap; gap: 0.75rem; align-items: center;\"\u003e\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Version: 0.1.0\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Last Update: 2025/05/20\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    MCP Support\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Python Calling Support\n  \u003c/span\u003e\n\u003c/span\u003e\n\n\u003c/div\u003e\n\u003cdiv class=\"lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl\"\u003e\n  \u003cstrong\u003ePredict the toxicity of a molecule given its SMILES representation.\u003c/strong\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong\u003eExample\u003c/strong\u003e\u003c/p\u003e","title":"ToxicityPredictor (predict_toxicity)","type":"tools"},{"content":" Version: 0.1.0 Last Update: 2025/05/20 MCP Support Python Calling Support Search the web for any questions and knowledge and obtain a concise answer based on thesearch results. Example\nInput:\nquery: \u0026#39;What is the boiling point of water?\u0026#39; Text Input (used for the run_text function in the Python calling mode):\nquery: \u0026#39;What is the boiling point of water?\u0026#39; Output:\nresult: \u0026#39;The boiling point of water at sea level is 100°C (212°F).\u0026#39; Usage # The tool supports both MCP mode and Python calling mode.\nEnvironment Variables # This tool requires the following environment variables:\nTAVILY_API_KEY: The API key for Tavily. MCP Mode # Configure your MCP client following its instructions with something like:\n{ \u0026#34;command\u0026#34;: \u0026#34;/ABSTRACT/PATH/TO/uv\u0026#34;, // Use `which uv` to get its path \u0026#34;args\u0026#34;: [\u0026#34;--directory\u0026#34;, \u0026#34;/ABSTRACT/PATH/TO/ChemMCP\u0026#34;, \u0026#34;run\u0026#34;, \u0026#34;--tools\u0026#34;, \u0026#34;WebSearch\u0026#34;], \u0026#34;toolCallTimeoutMillis\u0026#34;: 300000, \u0026#34;env\u0026#34;: { \u0026#34;TAVILY_API_KEY\u0026#34;: \u0026#34;VALUE_TO_BE_SET\u0026#34; } } Python Calling Mode # import os from chemmcp.tools import WebSearch # Set the environment variables os.environ[\u0026#39;TAVILY_API_KEY\u0026#39;] = \u0026#39;VALUE_TO_BE_SET\u0026#39; # Initialize the tool tool = WebSearch() # The tool has two alternative ways to run: # 1. Run with separate input domains (recommended) output = tool.run_code( query=\u0026#39;What is the boiling point of water?\u0026#39; ) # 2. Run with text-only input output = tool.run_text( query=\u0026#39;What is the boiling point of water?\u0026#39; ) Each tool in ChemMCP has two ways to run:\nrun_code (recommended): The inputs contain one or more domains, each of which can be a str, an int, a float, etc. run_text: The inputs are a single string in a specific format. The tool will parse the string to extract the input domains. This is useful in scenarios where an agent framework calls tools only with text input. The output is the same in both cases. For the input and output domains, please refer to the tool\u0026rsquo;s signature.\nTool Signature # Input # Used in the MCP mode, as well as the run_code function in the Python calling mode.\nName Type Default Description query str N/A The search query. Text Input # Used in the run_text function in the Python calling mode.\nName Type Default Description query str N/A The search query. Output # The output is the same in both input cases.\nName Type Description result str The answer to the search query summarized by Tavily\u0026rsquo;s LLM. Envs # Name Description TAVILY_API_KEY The API key for Tavily. ","externalUrl":null,"permalink":"/tools/web_search/","section":"ChemMCP Tools","summary":"\u003cdiv style=\"display: flex; flex-wrap: wrap; gap: 0.75rem; align-items: center;\"\u003e\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Version: 0.1.0\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Last Update: 2025/05/20\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    MCP Support\n  \u003c/span\u003e\n\u003c/span\u003e\n\n  \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Python Calling Support\n  \u003c/span\u003e\n\u003c/span\u003e\n\n\u003c/div\u003e\n\u003cdiv class=\"lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl\"\u003e\n  \u003cstrong\u003eSearch the web for any questions and knowledge and obtain a concise answer based on thesearch results.\u003c/strong\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong\u003eExample\u003c/strong\u003e\u003c/p\u003e","title":"WebSearch (search_web)","type":"tools"},{"content":"We sincerely welcome your contribution of new tools. This guide walks you through the steps to create, test, and submit a new MCP-compatible tool in the ChemMCP package.\nStep 0: Setup # To begin with, fork our Github repo into your own account and clone to your local machine. You could install uv and do uv sync as introduced here, which creates a Python environment for you and smooths your development.\nStep 1: Choose Your Tool’s Names # You need to determine a tool name and a tool function name for your tool. Specifically:\nTool Name: The name of the tool.\nUse PascalCase (every word head capitalized), noun-phrase style. Examples: WebSearch, BbbpPredictor, Smiles2Iupac. Function Name: The Python function-like name of the tool, used in the MCP server.\nUse snake-case, verb-phrase style. Examples: search_web, predict_bbbp, convert_smiles_to_iupac. File Name (or module name): The Python module name, matching your tool name.\nLowercase, snake-case. Examples: web_search.py, bbbp_predictor.py, smiles2iupac.py. Step 2: Create Your Tool File and Register # Create a Python file with your file name, under src/chemmcp/tools/. Then, register your tool to the module map in src/chemmcp/tools/__init__.py:\n_tool_module_map = { # … existing entries … \u0026#34;MyNewTool\u0026#34;: \u0026#34;my_new_tool\u0026#34;, # Tool Name: File Name. } Step 3: Implement Your Tool # Copy the following template to the file, and implement the mentioned variables and functions for your tool:\nimport os import logging from typing import Optional from openai import OpenAI from ..utils.base_tool import BaseTool from ..utils.errors import ChemMCPToolError # your custom errors from ..utils.mcp_app import ChemMCPManager, run_mcp_server # Use `logger.info(\u0026#34;msg\u0026#34;)` or `logger.debug(\u0026#34;msg\u0026#34;)` to print messages if neceesary, instead of `print`. logger = logging.getLogger(__name__) @ChemMCPManager.register_tool # Use this decorator if you want it discoverable in MCP mode class MyNewTool(BaseTool): # Class name must match the tool name __version__ = \u0026#34;0.1.0\u0026#34; # semver: MAJOR.MINOR.PATCH name = \u0026#34;MyNewTool\u0026#34; # must match class name func_name = \u0026#34;do_something\u0026#34; # snake-case verb phrase description = \u0026#34;Brief description of what MyNewTool does.\u0026#34; categories = [\u0026#34;General\u0026#34;] # choose from Molecule | Reaction | General tags = [\u0026#34;API\u0026#34;, \u0026#34;Neural Networks\u0026#34;, \u0026#34;Molecular Properties\u0026#34;, \u0026#34;LLMs\u0026#34;] # keywords for this tool required_envs = [ # if this tool needs users to set API keys or any environment variables; otherwise, leave it an empty list (\u0026#34;OPENAI_API_KEY\u0026#34;, \u0026#34;API key for OpenAI\u0026#34;), ] # the function signature for the following _run_base function # four elements presented in strings: input_domain_name, type, default value (\u0026#34;N/A\u0026#34; if no default), the description of this input code_input_sig = [ (\u0026#34;smiles\u0026#34;, \u0026#34;str\u0026#34;, \u0026#34;N/A\u0026#34;, \u0026#34;SMILES string of the molecule.\u0026#34;), (\u0026#34;threshold\u0026#34;, \u0026#34;float\u0026#34;, \u0026#34;0.5\u0026#34;, \u0026#34;Cutoff threshold.\u0026#34;), ] # the function signature for the following _run_text function # four elements presented in strings: input_domain_name, type, default value (\u0026#34;N/A\u0026#34; if no default), the description of this input text_input_sig = [ (\u0026#34;smiles_and_threshold\u0026#34;, \u0026#34;str\u0026#34;, \u0026#34;N/A\u0026#34;, \u0026#34;The SMILES string of the moledule and the cutoff threshold, separated by a space.\u0026#34;), ] # the output for both the _run_base and _run_code function # three elements presented in strings: output_domain_name, type, the description of the output output_sig = [ (\u0026#34;result\u0026#34;, \u0026#34;float\u0026#34;, \u0026#34;The score of the input molecule.\u0026#34;), ] # the concrete example(s) of the input and output of this tool # at least one example examples = [ { \u0026#34;code_input\u0026#34;: { # the input to the _run_base function. must match your defined `code_input_sig` \u0026#34;molecule_smiles\u0026#34;: \u0026#34;CCO\u0026#34;, \u0026#34;threshold\u0026#34;: 0.7 }, \u0026#34;text_input\u0026#34;: { # the input to the _run_text function. must match your defined `text_input_sig` \u0026#34;smiles_and_threshold\u0026#34;: \u0026#34;CCO 0.7\u0026#34; }, \u0026#34;output\u0026#34;: { # the output of both of the function. must match your defined `output_sig` \u0026#34;result\u0026#34;: 0.13 } }, ] # You need to define your __init__ function, if you have any customized settings for this tool # Note: every argument must have a default value def __init__( self, openai_api_key: Optional[str] = None, # if your tool needs api_keys or any envs init: bool = True, # whether to run _init_modules. must have, just put this line interface: str = \u0026#34;code\u0026#34; # whether to use the code interface or text interface. must have, just put this line ): # Load API key or environment variable if any if openai_api_key is None: # first from the environment variables openai_api_key = os.getenv(\u0026#34;MY_TOOL_API_KEY\u0026#34;) if openai_api_key is None: # if no api_key found, raise an error # we recommend using the errors defined in `src/chemmcp/utils/errors.py` raise ChemMCPToolError(\u0026#34;Please set `MY_TOOL_API_KEY`.\u0026#34;) self.openai_api_key = openai_api_key super().__init__(init=init, interface=interface) # Optional. Recommeneded to load some checkpoints or initialize some external clients here. # This function will be called in super().__init__ if init==True. def _init_modules(self): \u0026#34;\u0026#34;\u0026#34; Load some checkpoints or initialize some external clients. \u0026#34;\u0026#34;\u0026#34; self.openai_client = OpenAI(self.openai_api_key) # Your must implement this function. # The input arguments are the input or your tool. # The output is the output of your tool. def _run_base(self, smiles: str, threshold: float = 0.5) -\u0026gt; float: \u0026#34;\u0026#34;\u0026#34; Core logic of your tool. \u0026#34;\u0026#34;\u0026#34; # … your implementation of the tool function … # You could call external APIs, load any models, or implement your own algorithms. score: float = self.openai_client.predict(smiles) # this is just a simplified example return score # This function is for those applications that only support one string as the input. # Typically, you just need to parse the input string and get the inputs to the _run_base function, then call _run_base. # This is optional: if your _run_base only has one str input argument, then you don\u0026#39;t need to manually implement this -- ChemMCP will do it for you. # Otherwise, please implement it. def _run_text(self, smiles_and_threshold: str) -\u0026gt; str: \u0026#34;\u0026#34;\u0026#34; Parse the only text str input, and then call _run_base. Return the result of _run_base. \u0026#34;\u0026#34;\u0026#34; # parse the text query into _run_base\u0026#39;s input arguments smiles, threshold = smiles_and_threshold.strip().split() smiles = str(smiles) threshold = float(threshold) # call _run_base result = self._run_base(smiles, threshold) return result At the bottom of your file, add:\nif __name__ == \u0026#34;__main__\u0026#34;: run_mcp_server() Step 4: Test Your Tool # You can write a script, or use Jupyter Notebook, or any other ways you like, to test your tool. Basically, initialize an instance of your tool class, and check if the tool works as expected.\nimport os from chemmcp.tools import MyNewTool os.environ[\u0026#39;OPENAI_API_KEY\u0026#39;] = \u0026#34;YOUR_API_KEY\u0026#34; my_new_tool = MyNewTool() # it calls your _run_base function result = my_new_tool.run_code(smiles=\u0026#34;CCO\u0026#34;, threshold=0.5) # it calls your _run_text function result = my_new_tool.run_text(smiles_and_threshold=\u0026#34;CCO 0.5\u0026#34;) If your tool supports MCP (i.e., you used @ChemMCPManager.register_tool), then to ensure it works well under the MCP mode, use MCP Inspector to test your tool.\n# Assume your file name is `my_new_tool.py` npx @modelcontextprotocol/inspector uv run -m src.chemmcp.tools.my_new_tool Step 5: Submit Your Tool # After testing your tool, you can now use git to submit to your forked repo, and then submit a pull request to our repo. We will check and merge your awesome work to ChemMCP.\nThank you very much 🥰\nContact # Have questions or feedback?\nOpen an issue for bug reports or feature requests on our GitHub repository.\nEmail us at yu.3737 at osu.edu \u0026ndash; we are eager to know your ideas and suggestions!\n","externalUrl":null,"permalink":"/dev-guide/","section":"ChemMCP - Build your own AI chemistry co-scientist.","summary":"\u003cp\u003eWe sincerely welcome your contribution of new tools. This guide walks you through the steps to create, test, and submit a new MCP-compatible tool in the ChemMCP package.\u003c/p\u003e\n\n\n\u003ch2 class=\"relative group\"\u003eStep 0: Setup \n    \u003cdiv id=\"step-0-setup\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#step-0-setup\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003eTo begin with, fork our \u003ca href=\"https://github.com/OSU-NLP-Group/ChemMCP\" target=\"_blank\"\u003eGithub repo\u003c/a\u003e into your own account and clone to your local machine. You could install uv and do \u003ccode\u003euv sync\u003c/code\u003e as introduced \u003ca href=\"/get-started/#quick-setup\"\u003ehere\u003c/a\u003e, which creates a Python environment for you and smooths your development.\u003c/p\u003e","title":"Development Guide","type":"page"},{"content":"","externalUrl":null,"permalink":"/quick-config/","section":"ChemMCP - Build your own AI chemistry co-scientist.","summary":"","title":"QuickConfig","type":"page"},{"content":"","externalUrl":null,"permalink":"/tags/apis/","section":"Tags","summary":"","title":"APIs","type":"tags"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/tags/cas/","section":"Tags","summary":"","title":"CAS","type":"tags"},{"content":"","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":" This is a demo of the background layout. Switch layout \u0026orarr; ","externalUrl":null,"permalink":"/","section":"ChemMCP - Build your own AI chemistry co-scientist.","summary":"\u003cdiv class=\"flex px-4 py-2 mb-8 text-base rounded-md bg-primary-100 dark:bg-primary-900\"\u003e\n  \u003cspan class=\"flex items-center ltr:pr-3 rtl:pl-3 text-primary-400\"\u003e\n    \n    \n      \u003cspan class=\"relative inline-block align-text-bottom icon\"\u003e\n        \u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"\u003e\u003cpath fill=\"currentColor\" d=\"M506.3 417l-213.3-364c-16.33-28-57.54-28-73.98 0l-213.2 364C-10.59 444.9 9.849 480 42.74 480h426.6C502.1 480 522.6 445 506.3 417zM232 168c0-13.25 10.75-24 24-24S280 154.8 280 168v128c0 13.25-10.75 24-23.1 24S232 309.3 232 296V168zM256 416c-17.36 0-31.44-14.08-31.44-31.44c0-17.36 14.07-31.44 31.44-31.44s31.44 14.08 31.44 31.44C287.4 401.9 273.4 416 256 416z\"/\u003e\u003c/svg\u003e\n    \n      \u003c/span\u003e\n    \n\n  \u003c/span\u003e\n  \u003cspan class=\"flex items-center justify-between grow dark:text-neutral-300\"\u003e\n    \u003cspan class=\"prose dark:prose-invert\"\u003eThis is a demo of the \u003ccode id=\"layout\"\u003ebackground\u003c/code\u003e layout.\u003c/span\u003e\n    \u003cbutton\n      id=\"switch-layout-button\"\n      class=\"px-4 !text-neutral !no-underline rounded-md bg-primary-600 hover:!bg-primary-500 dark:bg-primary-800 dark:hover:!bg-primary-700\"\n    \u003e\n      Switch layout \u0026orarr;\n    \u003c/button\u003e\n  \u003c/span\u003e\n\u003c/div\u003e","title":"ChemMCP - Build your own AI chemistry co-scientist.","type":"page"},{"content":"","externalUrl":null,"permalink":"/tags/chemspace/","section":"Tags","summary":"","title":"ChemSpace","type":"tags"},{"content":"","externalUrl":null,"permalink":"/categories/general/","section":"Categories","summary":"","title":"General","type":"categories"},{"content":"","externalUrl":null,"permalink":"/tags/iupac/","section":"Tags","summary":"","title":"IUPAC","type":"tags"},{"content":"","externalUrl":null,"permalink":"/tags/llms/","section":"Tags","summary":"","title":"LLMs","type":"tags"},{"content":"","externalUrl":null,"permalink":"/tags/molecular-formulas/","section":"Tags","summary":"","title":"Molecular Formulas","type":"tags"},{"content":"","externalUrl":null,"permalink":"/tags/molecular-information/","section":"Tags","summary":"","title":"Molecular Information","type":"tags"},{"content":"","externalUrl":null,"permalink":"/tags/molecular-names/","section":"Tags","summary":"","title":"Molecular Names","type":"tags"},{"content":"","externalUrl":null,"permalink":"/tags/molecular-operations/","section":"Tags","summary":"","title":"Molecular Operations","type":"tags"},{"content":"","externalUrl":null,"permalink":"/tags/molecular-properties/","section":"Tags","summary":"","title":"Molecular Properties","type":"tags"},{"content":"","externalUrl":null,"permalink":"/categories/molecule/","section":"Categories","summary":"","title":"Molecule","type":"categories"},{"content":"","externalUrl":null,"permalink":"/tags/name-conversion/","section":"Tags","summary":"","title":"Name Conversion","type":"tags"},{"content":"","externalUrl":null,"permalink":"/tags/neural-networks/","section":"Tags","summary":"","title":"Neural Networks","type":"tags"},{"content":"","externalUrl":null,"permalink":"/tags/pubchem/","section":"Tags","summary":"","title":"PubChem","type":"tags"},{"content":"","externalUrl":null,"permalink":"/tags/qa/","section":"Tags","summary":"","title":"QA","type":"tags"},{"content":"","externalUrl":null,"permalink":"/tags/rdkit/","section":"Tags","summary":"","title":"RDKit","type":"tags"},{"content":"","externalUrl":null,"permalink":"/categories/reaction/","section":"Categories","summary":"","title":"Reaction","type":"categories"},{"content":"","externalUrl":null,"permalink":"/tags/reaction-information/","section":"Tags","summary":"","title":"Reaction Information","type":"tags"},{"content":"","externalUrl":null,"permalink":"/tags/reaction-prediction/","section":"Tags","summary":"","title":"Reaction Prediction","type":"tags"},{"content":"","externalUrl":null,"permalink":"/tags/selfies/","section":"Tags","summary":"","title":"SELFIES","type":"tags"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"","externalUrl":null,"permalink":"/tags/smarts/","section":"Tags","summary":"","title":"SMARTS","type":"tags"},{"content":"","externalUrl":null,"permalink":"/tags/smiles/","section":"Tags","summary":"","title":"SMILES","type":"tags"},{"content":"","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","externalUrl":null,"permalink":"/tags/text/","section":"Tags","summary":"","title":"Text","type":"tags"},{"content":"","externalUrl":null,"permalink":"/tags/web-searching/","section":"Tags","summary":"","title":"Web Searching","type":"tags"}]